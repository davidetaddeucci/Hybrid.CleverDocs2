@page "/"
@namespace Hybrid.CleverDocs.WebUI.Components.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using Hybrid.CleverDocs.WebUI.Models
@using Hybrid.CleverDocs.WebUI.Services.Auth
@inject IAuthService AuthService
@attribute [Authorize]

<PageTitle>Dashboard - CleverDocs</PageTitle>

<div class="cd-content-area">
    <!-- Page Header -->
    <div class="flex items-center justify-between mb-8">
        <div>
            <h1 class="cd-headline-large">Dashboard</h1>
            <p class="cd-body-medium text-gray-600 mt-2">
                Benvenuto nel tuo centro di controllo CleverDocs
            </p>
        </div>
        <div class="flex items-center space-x-4">
            <button class="cd-btn cd-btn-outlined cd-state-layer">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
                Esporta Report
            </button>
            <button class="cd-btn cd-btn-filled cd-state-layer">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Nuova Azione
            </button>
        </div>
    </div>

    <AuthorizeView>
        <Authorized>
            @{
                var user = context.User;
                var role = GetUserRole(user);
            }

            @if (role == UserRole.Admin)
            {
                <AdminDashboard />
            }
            else if (role == UserRole.Company)
            {
                <CompanyDashboard />
            }
            else if (role == UserRole.User)
            {
                <UserDashboard />
            }
        </Authorized>
    </AuthorizeView>
</div>

<!-- Admin Dashboard -->
@if (currentRole == UserRole.Admin)
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Stats Cards -->
        <StatsCard 
            Title="Aziende Totali"
            Value="@adminStats.TotalCompanies.ToString()"
            Icon="business"
            Color="blue"
            Trend="+12%"
            TrendUp="true" />
        
        <StatsCard 
            Title="Utenti Attivi"
            Value="@adminStats.TotalUsers.ToString()"
            Icon="people"
            Color="green"
            Trend="+8%"
            TrendUp="true" />
        
        <StatsCard 
            Title="Documenti"
            Value="@adminStats.TotalDocuments.ToString()"
            Icon="folder"
            Color="purple"
            Trend="+24%"
            TrendUp="true" />
        
        <StatsCard 
            Title="Query AI"
            Value="@adminStats.TotalQueries.ToString()"
            Icon="chat"
            Color="orange"
            Trend="+15%"
            TrendUp="true" />
    </div>

    <!-- Charts Row -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <ChartCard 
            Title="Utilizzo Mensile"
            ChartType="line"
            Data="@monthlyUsageData" />
        
        <ChartCard 
            Title="Distribuzione per Ruolo"
            ChartType="doughnut"
            Data="@roleDistributionData" />
    </div>

    <!-- Recent Activity -->
    <ActivityCard 
        Title="AttivitÃ  Recenti"
        Activities="@recentActivities" />
}

<!-- Company Dashboard -->
@if (currentRole == UserRole.Company)
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <StatsCard 
            Title="Utenti Azienda"
            Value="@companyStats.UserCount.ToString()"
            Icon="people"
            Color="blue" />
        
        <StatsCard 
            Title="Collezioni"
            Value="@companyStats.CollectionCount.ToString()"
            Icon="folder"
            Color="green" />
        
        <StatsCard 
            Title="Documenti"
            Value="@companyStats.DocumentCount.ToString()"
            Icon="upload"
            Color="purple" />
    </div>

    <!-- Company Charts -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <ChartCard 
            Title="Utilizzo Settimanale"
            ChartType="bar"
            Data="@weeklyUsageData" />
        
        <QuotaCard 
            Title="Quote Utilizzo"
            UsedUsers="@companyStats.UserCount"
            MaxUsers="@companySettings.MaxUsers"
            UsedDocuments="@companyStats.DocumentCount"
            MaxDocuments="@(companySettings.MaxDocumentsPerUser * companyStats.UserCount)" />
    </div>
}

<!-- User Dashboard -->
@if (currentRole == UserRole.User)
{
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <StatsCard 
            Title="Le Mie Collezioni"
            Value="@userStats.CollectionCount.ToString()"
            Icon="folder"
            Color="blue" />
        
        <StatsCard 
            Title="Documenti Caricati"
            Value="@userStats.DocumentCount.ToString()"
            Icon="upload"
            Color="green" />
        
        <StatsCard 
            Title="Conversazioni"
            Value="@userStats.ConversationCount.ToString()"
            Icon="chat"
            Color="purple" />
    </div>

    <!-- Quick Actions -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <QuickActionCard 
            Title="Nuova Collezione"
            Description="Crea una nuova collezione per organizzare i tuoi documenti"
            Icon="folder"
            ActionText="Crea Collezione"
            ActionUrl="/user/collections/new" />
        
        <QuickActionCard 
            Title="Carica Documenti"
            Description="Aggiungi nuovi documenti alle tue collezioni"
            Icon="upload"
            ActionText="Carica File"
            ActionUrl="/user/documents/upload" />
        
        <QuickActionCard 
            Title="Chat AI"
            Description="Inizia una nuova conversazione con l'AI"
            Icon="chat"
            ActionText="Avvia Chat"
            ActionUrl="/user/chat" />
    </div>

    <!-- Recent Collections -->
    <RecentCollectionsCard 
        Collections="@recentCollections" />
}

@code {
    private UserRole currentRole = UserRole.User;
    private DashboardStats adminStats = new(0, 0, 0, 0, 0, Array.Empty<AnalyticsData>());
    private Company companyStats = new("", "", "", "", "", "", new CompanySettings(0, 0, 0, "", "", ""), DateTime.Now, 0, 0, 0);
    private CompanySettings companySettings = new(0, 0, 0, "", "", "");
    private UserStats userStats = new(0, 0, 0);
    
    private object[] monthlyUsageData = Array.Empty<object>();
    private object[] roleDistributionData = Array.Empty<object>();
    private object[] weeklyUsageData = Array.Empty<object>();
    private AnalyticsData[] recentActivities = Array.Empty<AnalyticsData>();
    private Collection[] recentCollections = Array.Empty<Collection>();

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            currentRole = user.Role;
            await LoadDashboardData();
        }
    }

    private async Task LoadDashboardData()
    {
        // Simulate loading data based on role
        switch (currentRole)
        {
            case UserRole.Admin:
                await LoadAdminData();
                break;
            case UserRole.Company:
                await LoadCompanyData();
                break;
            case UserRole.User:
                await LoadUserData();
                break;
        }
    }

    private async Task LoadAdminData()
    {
        // Simulate admin dashboard data
        adminStats = new DashboardStats(
            TotalUsers: 1247,
            TotalCompanies: 89,
            TotalCollections: 3456,
            TotalDocuments: 12789,
            TotalQueries: 45632,
            RecentActivity: new[]
            {
                new AnalyticsData("Nuova azienda registrata", 1, DateTime.Now.AddMinutes(-15), "company"),
                new AnalyticsData("Upload documenti", 23, DateTime.Now.AddMinutes(-30), "document"),
                new AnalyticsData("Query AI", 156, DateTime.Now.AddHours(-1), "query")
            }
        );

        monthlyUsageData = new object[]
        {
            new { Month = "Gen", Users = 1100, Documents = 8500, Queries = 25000 },
            new { Month = "Feb", Users = 1150, Documents = 9200, Queries = 28000 },
            new { Month = "Mar", Users = 1200, Documents = 10800, Queries = 32000 },
            new { Month = "Apr", Users = 1247, Documents = 12789, Queries = 45632 }
        };

        roleDistributionData = new object[]
        {
            new { Role = "Admin", Count = 12 },
            new { Role = "Company", Count = 89 },
            new { Role = "User", Count = 1146 }
        };
    }

    private async Task LoadCompanyData()
    {
        // Simulate company dashboard data
        companyStats = new Company(
            Id: "comp-123",
            Name: "Acme Corporation",
            Email: "admin@acme.com",
            LogoUrl: null,
            Phone: "+39 02 1234567",
            Address: "Via Roma 123, Milano",
            Settings: new CompanySettings(50, 1000, 100, "gpt-4", "sk-...", "hybrid"),
            CreatedAt: DateTime.Now.AddMonths(-6),
            UserCount: 23,
            CollectionCount: 156,
            DocumentCount: 1247
        );

        companySettings = companyStats.Settings;
    }

    private async Task LoadUserData()
    {
        // Simulate user dashboard data
        userStats = new UserStats(
            CollectionCount: 8,
            DocumentCount: 45,
            ConversationCount: 23
        );

        recentCollections = new[]
        {
            new Collection("col-1", "Documenti Legali", "Contratti e documenti legali", "user-123", "Mario Rossi", 12, DateTime.Now.AddDays(-2), DateTime.Now.AddHours(-3)),
            new Collection("col-2", "Manuali Tecnici", "Documentazione tecnica prodotti", "user-123", "Mario Rossi", 8, DateTime.Now.AddDays(-5), DateTime.Now.AddDays(-1)),
            new Collection("col-3", "Report Finanziari", "Report e analisi finanziarie", "user-123", "Mario Rossi", 15, DateTime.Now.AddDays(-7), DateTime.Now.AddHours(-6))
        };
    }

    private UserRole GetUserRole(System.Security.Claims.ClaimsPrincipal user)
    {
        var roleString = user.FindFirst("role")?.Value;
        if (Enum.TryParse<UserRole>(roleString, out var role))
        {
            return role;
        }
        return UserRole.User;
    }

    // Helper record for user stats
    private record UserStats(int CollectionCount, int DocumentCount, int ConversationCount);
}

<!-- Component Templates will be created separately -->