@model Hybrid.CleverDocs.WebUI.ViewModels.LoginViewModel
@{
    ViewData["Title"] = "Login Successful";
    Layout = "_LoginLayout";
}

<div class="card z-index-0 fadeIn3 fadeInBottom">
    <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
        <div class="bg-gradient-success shadow-success border-radius-lg py-3 pe-1">
            <h4 class="text-white font-weight-bolder text-center mt-2 mb-0">Login Successful</h4>
        </div>
    </div>
    <div class="card-body text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Redirecting to dashboard...</p>
    </div>
</div>

<script>
    // JWT Authentication: Store tokens in localStorage and redirect
    (function() {
        try {
            // Store JWT tokens in localStorage
            const accessToken = '@ViewBag.AccessToken';
            const refreshToken = '@ViewBag.RefreshToken';
            const userInfo = @Html.Raw(Json.Serialize(ViewBag.UserInfo));
            
            if (accessToken && accessToken !== '') {
                localStorage.setItem('access_token', accessToken);
                console.log('Access token stored in localStorage');
            }
            
            if (refreshToken && refreshToken !== '') {
                localStorage.setItem('refresh_token', refreshToken);
                console.log('Refresh token stored in localStorage');
            }
            
            if (userInfo) {
                localStorage.setItem('user_info', JSON.stringify(userInfo));
                console.log('User info stored in localStorage');
            }
            
            // JWT Authentication: For now, redirect to Collections page (we know it works)
            let redirectUrl = '/collections';

            // Use returnUrl if provided and valid, otherwise use collections
            const returnUrl = '@ViewBag.ReturnUrl';
            const finalUrl = (returnUrl && returnUrl !== '' && returnUrl !== '/RoleRedirect') ? returnUrl : redirectUrl;

            setTimeout(function() {
                window.location.href = finalUrl;
            }, 1000);
            
        } catch (error) {
            console.error('Error storing authentication data:', error);
            // Fallback redirect
            window.location.href = '/';
        }
    })();
</script>
