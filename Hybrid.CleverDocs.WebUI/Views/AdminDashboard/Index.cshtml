@model Hybrid.CleverDocs.WebUI.ViewModels.AdminDashboardViewModel
@{
    ViewData["Title"] = "Admin Dashboard";
}

<!-- Welcome Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="mb-1">Admin Dashboard üõ†Ô∏è</h3>
                        <p class="text-muted mb-0">System overview and management tools.</p>
                    </div>
                    <div class="text-end">
                        <small class="text-muted">@DateTime.Now.ToString("MMMM dd, yyyy")</small>
                        <br>
                        <small class="text-muted">@DateTime.Now.ToString("HH:mm")</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modern Stats Cards -->
<div class="row mb-4">
    @await Component.InvokeAsync("StatCard", new Hybrid.CleverDocs.WebUI.ViewComponents.StatCardModel
    {
        Title = "Total Companies",
        Value = Model.TotalCompanies.ToString(),
        Icon = "business",
        Color = "primary",
        TrendPercentage = "+12.5",
        TrendDescription = "vs last month",
        TrendDirection = "up",
        AnimateCounter = true,
        ActionUrl = Url.Action("Index", "Companies")
    })

    @await Component.InvokeAsync("StatCard", new Hybrid.CleverDocs.WebUI.ViewComponents.StatCardModel
    {
        Title = "Total Users",
        Value = Model.TotalUsers.ToString(),
        Icon = "people",
        Color = "info",
        TrendPercentage = "+8.2",
        TrendDescription = "vs last month",
        TrendDirection = "up",
        AnimateCounter = true,
        ActionUrl = Url.Action("Index", "Users")
    })

    @await Component.InvokeAsync("StatCard", new Hybrid.CleverDocs.WebUI.ViewComponents.StatCardModel
    {
        Title = "Total Documents",
        Value = Model.TotalDocuments.ToString(),
        Icon = "description",
        Color = "success",
        TrendPercentage = "+15.3",
        TrendDescription = "vs last month",
        TrendDirection = "up",
        AnimateCounter = true,
        ActionUrl = Url.Action("Index", "AdminDocuments")
    })

    @await Component.InvokeAsync("StatCard", new Hybrid.CleverDocs.WebUI.ViewComponents.StatCardModel
    {
        Title = "System Health",
        Value = Model.SystemHealth?.IsHealthy == true ? "Healthy" : "Issues",
        Icon = "health_and_safety",
        Color = Model.SystemHealth?.IsHealthy == true ? "success" : "danger",
        TrendDescription = "Last checked: " + (Model.SystemHealth?.LastChecked.ToString("HH:mm") ?? "Unknown"),
        AnimateCounter = false,
        ActionUrl = Url.Action("SystemHealth", "Admin")
    })
</div>

<!-- Charts Section -->
<div class="row mb-4">
    <div class="col-lg-8">
        @await Component.InvokeAsync("Chart", new Hybrid.CleverDocs.WebUI.ViewComponents.ChartModel
        {
            Title = "User Growth Trend",
            Type = "line",
            DataUrl = Url.Action("GetUserGrowthChart", "Chart"),
            Height = 350,
            Color = "primary",
            ShowExport = true,
            ShowToolbar = true,
            Description = "Monthly user registration trends",
            RefreshInterval = 300, // 5 minutes
            Size = "lg"
        })
    </div>

    <div class="col-lg-4">
        @await Component.InvokeAsync("Chart", new Hybrid.CleverDocs.WebUI.ViewComponents.ChartModel
        {
            Title = "Document Types",
            Type = "doughnut",
            DataUrl = Url.Action("GetDocumentTypesChart", "Chart"),
            Height = 350,
            Color = "info",
            ShowExport = true,
            Description = "Distribution of document types in the system",
            Size = "md"
        })
    </div>
</div>

<!-- Additional Charts Row -->
<div class="row mb-4">
    <div class="col-lg-6">
        @await Component.InvokeAsync("Chart", new Hybrid.CleverDocs.WebUI.ViewComponents.ChartModel
        {
            Title = "Company Activity",
            Type = "bar",
            DataUrl = Url.Action("GetCompanyActivityChart", "Chart"),
            Height = 300,
            Color = "success",
            ShowToolbar = true,
            Description = "Daily activity by companies",
            Size = "md"
        })
    </div>

    <div class="col-lg-6">
        @await Component.InvokeAsync("Chart", new Hybrid.CleverDocs.WebUI.ViewComponents.ChartModel
        {
            Title = "Storage Usage",
            Type = "pie",
            DataUrl = Url.Action("GetStorageUsageChart", "Chart"),
            Height = 300,
            Color = "warning",
            Description = "System storage utilization",
            Size = "md"
        })
    </div>
</div>

<!-- Company Stats Table -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Company Statistics</h5>
            </div>
            <div class="card-body">
                @if (Model.CompanyStats?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Company</th>
                                    <th>Users</th>
                                    <th>Documents</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var company in Model.CompanyStats)
                                {
                                    <tr>
                                        <td>@company.Name</td>
                                        <td>@company.UserCount</td>
                                        <td>@company.DocumentCount</td>
                                        <td>
                                            @if (company.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No company data available.</p>
                }
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">System Status</h5>
            </div>
            <div class="card-body">
                @if (Model.SystemHealth != null)
                {
                    <div class="mb-3">
                        <strong>Status:</strong> 
                        @if (Model.SystemHealth.IsHealthy)
                        {
                            <span class="badge bg-success">Healthy</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">@Model.SystemHealth.Status</span>
                        }
                    </div>
                    <div class="mb-3">
                        <strong>Last Checked:</strong><br>
                        <small class="text-muted">@Model.SystemHealth.LastChecked.ToString("yyyy-MM-dd HH:mm:ss")</small>
                    </div>
                }
                else
                {
                    <p class="text-muted">System health data unavailable.</p>
                }
            </div>
        </div>
    </div>
</div>

<!-- Recent Activities -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Recent Activities</h5>
            </div>
            <div class="card-body">
                @if (Model.RecentActivities?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Action</th>
                                    <th>User</th>
                                    <th>Company</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var activity in Model.RecentActivities.Take(10))
                                {
                                    <tr>
                                        <td>@activity.Action</td>
                                        <td>@activity.UserEmail</td>
                                        <td>@activity.CompanyName</td>
                                        <td>@activity.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No recent activities.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Dashboard-specific JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize any dashboard-specific functionality
            console.log('Admin Dashboard loaded with modern StatCards');

            // Example: Refresh stats every 30 seconds
            setInterval(function() {
                // You can implement auto-refresh logic here
                console.log('Stats refresh interval triggered');
            }, 30000);
        });
    </script>
}