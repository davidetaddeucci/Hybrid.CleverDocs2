@{
    ViewData["Title"] = "R2R Processing Test";
    ViewData["PageTitle"] = "R2R Processing Test";
}

@section Styles {
    <link href="~/css/r2r-processing.css" rel="stylesheet" />
}

<!-- R2R Processing Test Page -->
<div class="r2r-test-page" data-page="r2r-test">
    <!-- Page Header -->
    <div class="page-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="page-title mb-1">
                    <i class="material-symbols-rounded me-2">psychology</i>
                    R2R Processing Test
                </h1>
                <p class="text-muted mb-0">Test real-time R2R document processing status updates</p>
            </div>
            <div class="col-md-4 text-end">
                <button type="button" class="btn btn-primary" onclick="simulateR2RProcessing()">
                    <i class="material-symbols-rounded me-1">play_arrow</i>
                    Simulate Processing
                </button>
            </div>
        </div>
    </div>

    <!-- Connection Status -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0">
                <i class="material-symbols-rounded me-2">wifi</i>
                SignalR Connection Status
            </h6>
            <div id="connection-status" class="badge bg-secondary">
                <i class="material-symbols-rounded me-1">sync</i>
                Initializing...
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6>Connection Info</h6>
                    <ul class="list-unstyled">
                        <li><strong>Hub URL:</strong> /hubs/upload</li>
                        <li><strong>State:</strong> <span id="connection-state">Disconnected</span></li>
                        <li><strong>Connection ID:</strong> <span id="connection-id">N/A</span></li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6>Actions</h6>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="connectSignalR()">
                            <i class="material-symbols-rounded me-1">link</i>
                            Connect
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="disconnectSignalR()">
                            <i class="material-symbols-rounded me-1">link_off</i>
                            Disconnect
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="requestR2RStatus()">
                            <i class="material-symbols-rounded me-1">refresh</i>
                            Request Status
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- R2R Processing Status Container -->
    <!-- This will be automatically created by r2r-processing.js -->

    <!-- Test Controls -->
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="material-symbols-rounded me-2">science</i>
                Test Controls
            </h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="testFileName" class="form-label">Test File Name</label>
                    <input type="text" class="form-control" id="testFileName" value="test-document.pdf">
                </div>
                <div class="col-md-4">
                    <label for="testFileSize" class="form-label">File Size (bytes)</label>
                    <input type="number" class="form-control" id="testFileSize" value="1048576">
                </div>
                <div class="col-md-4">
                    <label for="testStatus" class="form-label">Test Status</label>
                    <select class="form-select" id="testStatus">
                        <option value="Queued">Queued</option>
                        <option value="Processing">Processing</option>
                        <option value="Chunking">Chunking</option>
                        <option value="R2RIngestion">R2R Ingestion</option>
                        <option value="Indexing">Indexing</option>
                        <option value="Completed">Completed</option>
                        <option value="Failed">Failed</option>
                        <option value="Retrying">Retrying</option>
                    </select>
                </div>
            </div>
            <div class="mt-3">
                <button type="button" class="btn btn-primary" onclick="simulateStatusUpdate()">
                    <i class="material-symbols-rounded me-1">send</i>
                    Send Test Update
                </button>
                <button type="button" class="btn btn-secondary" onclick="simulateFullWorkflow()">
                    <i class="material-symbols-rounded me-1">auto_mode</i>
                    Simulate Full Workflow
                </button>
                <button type="button" class="btn btn-warning" onclick="clearTestData()">
                    <i class="material-symbols-rounded me-1">clear_all</i>
                    Clear Test Data
                </button>
            </div>
        </div>
    </div>

    <!-- Event Log -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0">
                <i class="material-symbols-rounded me-2">event_note</i>
                Event Log
            </h6>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearEventLog()">
                <i class="material-symbols-rounded me-1">clear</i>
                Clear Log
            </button>
        </div>
        <div class="card-body">
            <div id="event-log" class="event-log" style="height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.875rem;">
                <div class="text-muted">Event log will appear here...</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/r2r-processing.js"></script>
    <script>
        // Test page specific functionality
        let testConnection = null;
        let testDocumentId = null;

        document.addEventListener('DOMContentLoaded', function() {
            logEvent('Page loaded, initializing R2R test environment...');
            
            // Initialize test environment
            initializeTestEnvironment();
        });

        function initializeTestEnvironment() {
            // Wait for R2R manager to initialize
            setTimeout(() => {
                if (window.r2rManager) {
                    logEvent('R2R Manager found, hooking into events...');
                    hookIntoR2RManager();
                } else {
                    logEvent('R2R Manager not found, creating test connection...');
                    createTestConnection();
                }
            }, 1000);
        }

        function hookIntoR2RManager() {
            const manager = window.r2rManager;
            
            // Update connection status
            if (manager.isConnected) {
                updateConnectionStatus('Connected', 'success');
                document.getElementById('connection-state').textContent = 'Connected';
                document.getElementById('connection-id').textContent = manager.connection.connectionId || 'Unknown';
            }

            // Hook into connection events
            if (manager.connection) {
                manager.connection.onreconnecting(() => {
                    updateConnectionStatus('Reconnecting...', 'warning');
                    logEvent('SignalR: Reconnecting...');
                });

                manager.connection.onreconnected(() => {
                    updateConnectionStatus('Connected', 'success');
                    logEvent('SignalR: Reconnected successfully');
                });

                manager.connection.onclose(() => {
                    updateConnectionStatus('Disconnected', 'danger');
                    logEvent('SignalR: Connection closed');
                });
            }
        }

        function createTestConnection() {
            // Get JWT token
            const token = getJwtToken();

            testConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5252/hubs/upload", {
                    accessTokenFactory: () => token
                })
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            testConnection.on("R2RProcessingUpdate", (queueItem) => {
                logEvent(`R2R Update: ${queueItem.FileName} - ${queueItem.Status}`);
            });

            testConnection.on("R2RProcessingStatus", (status) => {
                logEvent(`R2R Status: ${JSON.stringify(status)}`);
            });

            testConnection.onreconnecting(() => {
                updateConnectionStatus('Reconnecting...', 'warning');
                logEvent('Test Connection: Reconnecting...');
            });

            testConnection.onreconnected(() => {
                updateConnectionStatus('Connected', 'success');
                logEvent('Test Connection: Reconnected');
            });

            testConnection.onclose(() => {
                updateConnectionStatus('Disconnected', 'danger');
                logEvent('Test Connection: Closed');
            });

            // Auto-connect
            connectSignalR();
        }

        async function connectSignalR() {
            try {
                const connection = testConnection || (window.r2rManager && window.r2rManager.connection);
                if (connection && connection.state === signalR.HubConnectionState.Disconnected) {
                    await connection.start();
                    updateConnectionStatus('Connected', 'success');
                    document.getElementById('connection-state').textContent = 'Connected';
                    document.getElementById('connection-id').textContent = connection.connectionId || 'Unknown';
                    logEvent('SignalR connection established successfully');
                }
            } catch (error) {
                updateConnectionStatus('Error', 'danger');
                logEvent(`Connection error: ${error.message}`);
            }
        }

        async function disconnectSignalR() {
            try {
                const connection = testConnection || (window.r2rManager && window.r2rManager.connection);
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    await connection.stop();
                    updateConnectionStatus('Disconnected', 'secondary');
                    document.getElementById('connection-state').textContent = 'Disconnected';
                    document.getElementById('connection-id').textContent = 'N/A';
                    logEvent('SignalR connection closed');
                }
            } catch (error) {
                logEvent(`Disconnect error: ${error.message}`);
            }
        }

        async function requestR2RStatus() {
            try {
                const connection = testConnection || (window.r2rManager && window.r2rManager.connection);
                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    await connection.invoke("GetR2RProcessingStatus");
                    logEvent('R2R status requested');
                } else {
                    logEvent('Cannot request status: not connected');
                }
            } catch (error) {
                logEvent(`Status request error: ${error.message}`);
            }
        }

        function simulateStatusUpdate() {
            const fileName = document.getElementById('testFileName').value;
            const fileSize = parseInt(document.getElementById('testFileSize').value);
            const status = document.getElementById('testStatus').value;

            if (!testDocumentId) {
                testDocumentId = generateGuid();
            }

            const queueItem = {
                DocumentId: testDocumentId,
                FileName: fileName,
                FileSize: fileSize,
                Status: status,
                CreatedAt: new Date().toISOString(),
                UserId: 'test-user-id',
                R2RDocumentId: status === 'Completed' ? `r2r_doc_${generateGuid().substring(0, 8)}` : null
            };

            // Simulate receiving the update
            if (window.r2rManager) {
                window.r2rManager.handleR2RUpdate(queueItem);
            }

            logEvent(`Simulated update: ${fileName} -> ${status}`);
        }

        function simulateFullWorkflow() {
            const fileName = document.getElementById('testFileName').value;
            const fileSize = parseInt(document.getElementById('testFileSize').value);
            testDocumentId = generateGuid();

            const statuses = ['Queued', 'Processing', 'Chunking', 'R2RIngestion', 'Indexing', 'Completed'];
            let currentIndex = 0;

            logEvent(`Starting full workflow simulation for: ${fileName}`);

            const interval = setInterval(() => {
                if (currentIndex >= statuses.length) {
                    clearInterval(interval);
                    logEvent('Full workflow simulation completed');
                    return;
                }

                const status = statuses[currentIndex];
                const queueItem = {
                    DocumentId: testDocumentId,
                    FileName: fileName,
                    FileSize: fileSize,
                    Status: status,
                    CreatedAt: new Date().toISOString(),
                    UserId: 'test-user-id',
                    R2RDocumentId: status === 'Completed' ? `r2r_doc_${generateGuid().substring(0, 8)}` : null
                };

                if (window.r2rManager) {
                    window.r2rManager.handleR2RUpdate(queueItem);
                }

                logEvent(`Workflow step ${currentIndex + 1}/${statuses.length}: ${status}`);
                currentIndex++;
            }, 2000); // 2 seconds between each status
        }

        function clearTestData() {
            if (window.r2rManager) {
                window.r2rManager.processingItems.clear();
                window.r2rManager.updateProcessingList();
                window.r2rManager.updateGlobalStatus();
            }
            testDocumentId = null;
            logEvent('Test data cleared');
        }

        function updateConnectionStatus(message, type) {
            const statusElement = document.getElementById('connection-status');
            if (statusElement) {
                statusElement.className = `badge bg-${type}`;
                statusElement.innerHTML = `<i class="material-symbols-rounded me-1">wifi</i>${message}`;
            }
        }

        function logEvent(message) {
            const logContainer = document.getElementById('event-log');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.innerHTML = `<span class="text-muted">[${timestamp}]</span> ${message}`;
            logContainer.appendChild(logEntry);
            logContainer.scrollTop = logContainer.scrollHeight;
        }

        function clearEventLog() {
            const logContainer = document.getElementById('event-log');
            logContainer.innerHTML = '<div class="text-muted">Event log cleared...</div>';
        }

        function generateGuid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Get JWT token function
        function getJwtToken() {
            // Try to get from meta tag first (set by server)
            const metaToken = document.querySelector('meta[name="jwt-token"]');
            if (metaToken) {
                return metaToken.getAttribute('content');
            }

            // Try to get from localStorage
            const localToken = localStorage.getItem('jwt_token') || localStorage.getItem('access_token');
            if (localToken) {
                return localToken;
            }

            // Try to get from sessionStorage
            const sessionToken = sessionStorage.getItem('jwt_token') || sessionStorage.getItem('access_token');
            if (sessionToken) {
                return sessionToken;
            }

            // Try to parse from cookie (if stored as plain JWT)
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.trim().split('=');
                if (name === 'jwt_token' || name === 'access_token') {
                    return decodeURIComponent(value);
                }
            }

            console.warn('JWT token not found for SignalR authentication');
            return '';
        }

        // Global functions for button clicks
        window.simulateR2RProcessing = simulateFullWorkflow;
    </script>
}
