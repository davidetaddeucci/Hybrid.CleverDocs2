@model Hybrid.CleverDocs.WebUI.Models.Documents.DocumentUploadViewModel
@{
    ViewData["Title"] = "Upload Documents";
    ViewData["PageTitle"] = "Upload Documents";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1">Upload Documents</h1>
                    <p class="text-muted mb-0">
                        @if (Model.CollectionId.HasValue)
                        {
                            <span>Upload a document to the selected collection</span>
                        }
                        else
                        {
                            <span>Upload a document to your library</span>
                        }
                    </p>
                </div>
                <div>
                    @if (Model.CollectionId.HasValue)
                    {
                        <a href="@Url.Action("Details", "Collections", new { collectionId = Model.CollectionId })" 
                           class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Collection
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Documents")" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Documents
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Upload Form -->
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <form asp-action="Upload" method="post" enctype="multipart/form-data" id="uploadForm">
                        @Html.AntiForgeryToken()
                        
                        <!-- Hidden Collection ID -->
                        @if (Model.CollectionId.HasValue)
                        {
                            <input type="hidden" asp-for="CollectionId" />
                        }

                        <!-- File Upload Area -->
                        <div class="mb-4">
                            <label asp-for="File" class="form-label fw-bold">
                                Select File <span class="text-danger">*</span>
                            </label>
                            <div class="upload-area border-2 border-dashed rounded p-4 text-center" 
                                 id="uploadArea" 
                                 ondrop="handleDrop(event)" 
                                 ondragover="handleDragOver(event)" 
                                 ondragleave="handleDragLeave(event)">
                                <div class="upload-content">
                                    <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                    <h5 class="mb-2">Drag and drop your files here</h5>
                                    <p class="text-muted mb-3">Support for multiple files • or</p>
                                    <input type="file" asp-for="File" class="d-none" id="fileInput" accept="@string.Join(",", Model.AllowedFileTypes)" multiple />
                                    <button type="button" class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                                        <i class="fas fa-folder-open me-2"></i>Browse Files
                                    </button>
                                </div>
                                <div class="file-info d-none" id="fileInfo">
                                    <div class="d-flex align-items-center justify-content-center">
                                        <i class="fas fa-file fa-2x text-primary me-3"></i>
                                        <div class="text-start">
                                            <div class="fw-bold" id="fileName"></div>
                                            <div class="text-muted small" id="fileSize"></div>
                                        </div>
                                        <button type="button" class="btn btn-sm btn-outline-danger ms-3" onclick="clearFile()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-text">
                                <small class="text-muted">
                                    Maximum file size: @Model.FormattedMaxFileSize<br>
                                    Supported formats: @Model.AllowedFileTypesText
                                </small>
                            </div>
                            <span asp-validation-for="File" class="text-danger"></span>
                        </div>

                        <!-- Document Details -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Title" class="form-label">Title (optional)</label>
                                    <input asp-for="Title" class="form-control" placeholder="Leave empty to use filename" />
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="TagsInput" class="form-label">Tags</label>
                                    <input asp-for="TagsInput" class="form-control" placeholder="e.g., report, finance, 2024" />
                                    <div class="form-text">
                                        <small class="text-muted">Separate multiple tags with commas</small>
                                    </div>
                                    <span asp-validation-for="TagsInput" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description (optional)</label>
                            <textarea asp-for="Description" class="form-control" rows="3" 
                                      placeholder="Add a description to help others understand this document"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <!-- Options -->
                        <div class="mb-4">
                            <div class="form-check">
                                <input asp-for="IsFavorite" class="form-check-input" />
                                <label asp-for="IsFavorite" class="form-check-label">
                                    Add to favorites
                                </label>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            @if (Model.CollectionId.HasValue)
                            {
                                <a href="@Url.Action("Details", "Collections", new { collectionId = Model.CollectionId })" 
                                   class="btn btn-outline-secondary">Cancel</a>
                            }
                            else
                            {
                                <a href="@Url.Action("Index", "Documents")" class="btn btn-outline-secondary">Cancel</a>
                            }
                            <button type="submit" class="btn btn-primary" id="uploadBtn">
                                <i class="fas fa-upload me-2"></i>Upload Documents
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // File upload handling
        const fileInput = document.getElementById('fileInput');
        const uploadArea = document.getElementById('uploadArea');
        const uploadContent = document.querySelector('.upload-content');
        const fileInfo = document.getElementById('fileInfo');
        const fileName = document.getElementById('fileName');
        const fileSize = document.getElementById('fileSize');
        const uploadBtn = document.getElementById('uploadBtn');

        fileInput.addEventListener('change', handleFileSelect);

        function handleFileSelect(event) {
            const files = event.target.files;
            if (files.length > 0) {
                displayFilesInfo(files);
            }
        }

        function handleDrop(event) {
            event.preventDefault();
            uploadArea.classList.remove('border-primary', 'bg-light');

            const files = event.dataTransfer.files;
            if (files.length > 0) {
                fileInput.files = files;
                displayFilesInfo(files);
            }
        }

        function handleDragOver(event) {
            event.preventDefault();
            uploadArea.classList.add('border-primary', 'bg-light');
        }

        function handleDragLeave(event) {
            event.preventDefault();
            uploadArea.classList.remove('border-primary', 'bg-light');
        }

        function displayFilesInfo(files) {
            if (files.length === 1) {
                fileName.textContent = files[0].name;
                fileSize.textContent = formatFileSize(files[0].size);
                console.log(`📄 SINGLE FILE: ${files[0].name} (${formatFileSize(files[0].size)})`);
            } else {
                // Multiple files selected - show detailed info
                const totalSize = Array.from(files).reduce((total, file) => total + file.size, 0);
                fileName.innerHTML = `
                    <strong>${files.length} files selected for bulk upload</strong><br>
                    <small class="text-muted">
                        ${Array.from(files).slice(0, 3).map(f => f.name).join(', ')}
                        ${files.length > 3 ? ` and ${files.length - 3} more...` : ''}
                    </small>
                `;
                fileSize.textContent = formatFileSize(totalSize);

                console.log(`📊 BULK UPLOAD: ${files.length} files selected, total size: ${formatFileSize(totalSize)}`);
                Array.from(files).forEach((file, index) => {
                    console.log(`  ${index + 1}. ${file.name} (${formatFileSize(file.size)})`);
                });
            }

            uploadContent.classList.add('d-none');
            fileInfo.classList.remove('d-none');
            uploadArea.classList.add('border-success');
        }

        function clearFile() {
            fileInput.value = '';
            uploadContent.classList.remove('d-none');
            fileInfo.classList.add('d-none');
            uploadArea.classList.remove('border-success', 'border-primary', 'bg-light');
        }

        function formatFileSize(bytes) {
            const sizes = ['B', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 B';
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
        }

        // Form validation and submission
        document.getElementById('uploadForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Always prevent default form submission

            if (!fileInput.files.length) {
                alert('Please select one or more files to upload.');
                return false;
            }

            const files = Array.from(fileInput.files);
            console.log(`🚀 BULK UPLOAD: Starting upload of ${files.length} files`);

            uploadBtn.disabled = true;
            uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';

            // Use bulk upload API for multiple files
            if (files.length > 1) {
                uploadMultipleFiles(files);
            } else {
                uploadSingleFile(files[0]);
            }
        });

        // Bulk upload function using the backend bulk upload API
        async function uploadMultipleFiles(files) {
            try {
                console.log(`📊 BULK UPLOAD: Preparing ${files.length} files for bulk upload`);

                // Create FormData for bulk upload
                const formData = new FormData();

                // Add collection ID if available
                const collectionIdInput = document.querySelector('input[name="CollectionId"]');
                if (collectionIdInput && collectionIdInput.value) {
                    formData.append('CollectionId', collectionIdInput.value);
                }

                // Add upload options
                formData.append('Options.ExtractMetadata', 'true');
                formData.append('Options.PerformOCR', 'true');
                formData.append('Options.AutoDetectLanguage', 'true');
                formData.append('Options.GenerateThumbnails', 'true');
                formData.append('Options.EnableVersioning', 'true');
                formData.append('Options.MaxParallelUploads', '10');

                // Add all files
                files.forEach((file, index) => {
                    formData.append('Files', file);
                    console.log(`📁 BULK UPLOAD: Added file ${index + 1}/${files.length}: ${file.name} (${file.size} bytes)`);
                });

                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                console.log(`🎯 BULK UPLOAD: Sending ${files.length} files to bulk upload API`);

                // Call the bulk upload API endpoint via WebUI proxy
                const response = await fetch('/Documents/BulkUpload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log(`✅ BULK UPLOAD: Success! Response:`, result);

                    if (result.success) {
                        // Show success message and redirect
                        alert(result.message || `Successfully uploaded ${files.length} files!`);

                        // Redirect to collection using the collection ID from the response
                        const collectionId = result.collectionId || collectionIdInput?.value;
                        if (collectionId) {
                            console.log(`🎯 BULK UPLOAD: Redirecting to collection: ${collectionId}`);
                            // Use correct URL format: /Collections/{id} (not /Collections/Details/{id})
                            window.location.href = `/Collections/${collectionId}`;
                        } else {
                            console.log(`🎯 BULK UPLOAD: No collection ID, redirecting to Documents index`);
                            window.location.href = '/Documents';
                        }
                    } else {
                        throw new Error(result.message || 'Upload failed');
                    }
                } else {
                    const errorResult = await response.json().catch(() => ({ message: `${response.status} ${response.statusText}` }));
                    console.error(`❌ BULK UPLOAD: Failed with status ${response.status}:`, errorResult);
                    throw new Error(errorResult.message || `Upload failed: ${response.status} ${response.statusText}`);
                }

            } catch (error) {
                console.error('❌ BULK UPLOAD: Error:', error);
                alert(`Bulk upload failed: ${error.message}. Please try again.`);
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = '<i class="fas fa-upload me-2"></i>Upload Documents';
            }
        }

        // Single file upload function (fallback to original logic)
        function uploadSingleFile(file) {
            console.log(`📄 SINGLE UPLOAD: Uploading single file: ${file.name}`);

            // Use original form submission for single files
            const formData = new FormData(document.getElementById('uploadForm'));

            fetch(document.getElementById('uploadForm').action, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Upload failed');
                }
            })
            .then(html => {
                if (html) {
                    document.open();
                    document.write(html);
                    document.close();
                }
            })
            .catch(error => {
                console.error('Single upload error:', error);
                alert('Upload failed. Please try again.');
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = '<i class="fas fa-upload me-2"></i>Upload Documents';
            });
        }
    </script>

    <style>
        .upload-area {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .upload-area:hover {
            border-color: var(--bs-primary) !important;
            background-color: var(--bs-light);
        }
        
        .upload-area.border-primary {
            border-color: var(--bs-primary) !important;
        }
        
        .upload-area.border-success {
            border-color: var(--bs-success) !important;
        }
    </style>
}
