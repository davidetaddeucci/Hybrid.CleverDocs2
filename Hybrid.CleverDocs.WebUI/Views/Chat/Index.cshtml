@model ChatIndexViewModel
@{
    ViewData["Title"] = "Chat";
    ViewData["PageTitle"] = "AI Chat Assistant";
}

@section Styles {
    <link href="~/css/chat-integrated.css" rel="stylesheet" />
}

@* CRITICAL: Anti-forgery token for AJAX requests *@
@Html.AntiForgeryToken()

<!-- Material Design 3 Chat Interface -->
<div class="chat-page" data-page="chat">
    <!-- Page Header -->
    <div class="page-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="page-title mb-1">
                    <i class="material-symbols-rounded me-2">chat</i>
                    AI Chat Assistant
                </h1>
                <p class="text-muted mb-0">Intelligent conversations with your documents</p>
            </div>
            <div class="col-md-4 text-end">
                <button class="btn btn-primary" onclick="newConversation()">
                    <i class="material-symbols-rounded me-1">add</i>
                    New Conversation
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Interface -->
    <div class="row g-4">
        <!-- Conversations Sidebar -->
        <div class="col-lg-3">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="material-symbols-rounded me-2">forum</i>
                        Conversations
                    </h6>
                </div>
                <div class="card-body p-0">
                    <!-- Search -->
                    <div class="p-3 border-bottom">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="material-symbols-rounded">search</i>
                            </span>
                            <input type="text" class="form-control" placeholder="Search conversations..."
                                   id="conversationSearch" onkeyup="filterConversations(this.value)">
                        </div>
                    </div>

                    <!-- Conversation List -->
                    <div class="conversation-list" id="conversationList">
                        @if (Model.Conversations.Any())
                        {
                            @foreach(var conv in Model.Conversations)
                            {
                                <div class="conversation-item @(conv.IsActive ? "active" : "")"
                                     data-conversation-id="@conv.Id"
                                     onclick="loadConversation('@conv.Id')">
                                    <div class="d-flex justify-content-between align-items-start p-3 border-bottom">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1 text-truncate">@conv.Title</h6>
                                            <p class="mb-1 text-muted small text-truncate">@conv.LastMessage</p>
                                            <small class="text-muted">
                                                @conv.UpdatedAt.ToString("dd/MM HH:mm") â€¢ @conv.MessageCount messages
                                            </small>
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-link text-muted" type="button"
                                                    data-bs-toggle="dropdown" onclick="event.stopPropagation()">
                                                <i class="material-symbols-rounded">more_vert</i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="#" onclick="event.stopPropagation(); deleteConversation('@conv.Id')">
                                                    <i class="material-symbols-rounded me-2">delete</i>Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state text-center p-4">
                                <div class="empty-icon mb-3">
                                    <i class="material-symbols-rounded" style="font-size: 3rem; color: var(--bs-secondary);">chat_bubble_outline</i>
                                </div>
                                <h6 class="mb-2">No conversations yet</h6>
                                <p class="text-muted small mb-3">Start a new conversation to chat with your documents</p>
                                <button class="btn btn-primary btn-sm" onclick="newConversation()">
                                    <i class="material-symbols-rounded me-1">add</i>
                                    New Chat
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="col-lg-9">
            <div class="card h-100">
                <!-- Welcome Screen -->
                <div id="chat-placeholder" class="chat-welcome d-flex align-items-center justify-content-center h-100">
                    <div class="text-center p-5">
                        <div class="welcome-icon mb-4">
                            <i class="material-symbols-rounded" style="font-size: 4rem; color: var(--bs-primary);">smart_toy</i>
                        </div>
                        <h4 class="mb-3">Welcome to CleverDocs Chat</h4>
                        <p class="text-muted mb-4">Select a conversation or create a new one to start chatting with your documents.</p>

                        <div class="row g-3 mb-4">
                            <div class="col-md-4">
                                <div class="feature-card text-center p-3">
                                    <i class="material-symbols-rounded text-info mb-2" style="font-size: 2rem;">search</i>
                                    <h6 class="mb-1">Advanced Search</h6>
                                    <small class="text-muted">Semantic search across documents</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="feature-card text-center p-3">
                                    <i class="material-symbols-rounded text-success mb-2" style="font-size: 2rem;">format_quote</i>
                                    <h6 class="mb-1">Precise Citations</h6>
                                    <small class="text-muted">Accurate references from documents</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="feature-card text-center p-3">
                                    <i class="material-symbols-rounded text-warning mb-2" style="font-size: 2rem;">psychology</i>
                                    <h6 class="mb-1">Intelligent AI</h6>
                                    <small class="text-muted">Conversational AI assistant</small>
                                </div>
                            </div>
                        </div>

                        <button class="btn btn-primary btn-lg" onclick="newConversation()">
                            <i class="material-symbols-rounded me-2">add</i>
                            Start New Conversation
                        </button>
                    </div>
                </div>

                <!-- Conversation Container -->
                <div id="conversation-container" style="display: none;" class="h-100">
                    <!-- This will be populated by AJAX calls -->
                </div>
            </div>
        </div>
    </div>
    <!-- Chat Settings Modal -->
    <div class="modal fade" id="chatSettingsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="material-symbols-rounded me-2">settings</i>
                        Chat Settings
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-4">
                        <!-- Collections Selection -->
                        <div class="col-md-6">
                            <h6 class="mb-3">
                                <i class="material-symbols-rounded me-2">folder</i>
                                Active Collections
                            </h6>
                            <div class="collections-list">
                                @if (Model.AvailableCollections.Any())
                                {
                                    @foreach(var collection in Model.AvailableCollections)
                                    {
                                        <div class="form-check mb-2">
                                            <input class="form-check-input collection-checkbox" type="checkbox"
                                                   value="@collection.Id" id="coll_@collection.Id"
                                                   @(Model.Settings.SelectedCollectionIds.Contains(collection.Id) ? "checked" : "")>
                                            <label class="form-check-label" for="coll_@collection.Id">
                                                <span class="badge me-2" style="background-color: @collection.Color">
                                                    @collection.Name
                                                </span>
                                                <small class="text-muted">@collection.DocumentCount documents</small>
                                            </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center p-3">
                                        <i class="material-symbols-rounded text-muted mb-2" style="font-size: 2rem;">folder_open</i>
                                        <p class="text-muted small mb-2">No collections available</p>
                                        <a href="/Collections" class="btn btn-sm btn-outline-primary">
                                            <i class="material-symbols-rounded me-1">add</i>Create Collection
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Search Configuration -->
                        <div class="col-md-6">
                            <h6 class="mb-3">
                                <i class="material-symbols-rounded me-2">search</i>
                                Search Configuration
                            </h6>

                            <div class="mb-3">
                                <label class="form-label small">Relevance Threshold</label>
                                <input type="range" class="form-range" min="0.1" max="1.0" step="0.1"
                                       value="@Model.Settings.RelevanceThreshold" id="relevanceThreshold">
                                <div class="d-flex justify-content-between">
                                    <small class="text-muted">0.1</small>
                                    <small class="text-primary" id="thresholdValue">@Model.Settings.RelevanceThreshold</small>
                                    <small class="text-muted">1.0</small>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label small">Max Results</label>
                                <select class="form-select form-select-sm" id="maxResults">
                                    <option value="5" selected="@(Model.Settings.MaxResults == 5)">5</option>
                                    <option value="10" selected="@(Model.Settings.MaxResults == 10)">10</option>
                                    <option value="15" selected="@(Model.Settings.MaxResults == 15)">15</option>
                                    <option value="20" selected="@(Model.Settings.MaxResults == 20)">20</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label small">Search Mode</label>
                                <select class="form-select form-select-sm" id="searchMode">
                                    <option value="hybrid" selected="@(Model.Settings.SearchMode == "hybrid")">Hybrid</option>
                                    <option value="semantic" selected="@(Model.Settings.SearchMode == "semantic")">Semantic</option>
                                    <option value="keyword" selected="@(Model.Settings.SearchMode == "keyword")">Keyword</option>
                                </select>
                            </div>

                            <h6 class="mb-3 mt-4">
                                <i class="material-symbols-rounded me-2">tune</i>
                                Advanced Options
                            </h6>

                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="useVectorSearch"
                                       @(Model.Settings.UseVectorSearch ? "checked" : "")>
                                <label class="form-check-label small" for="useVectorSearch">
                                    Vector Search
                                </label>
                            </div>

                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="useHybridSearch"
                                       @(Model.Settings.UseHybridSearch ? "checked" : "")>
                                <label class="form-check-label small" for="useHybridSearch">
                                    Hybrid Search
                                </label>
                            </div>

                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="includeTitleIfAvailable"
                                       @(Model.Settings.IncludeTitleIfAvailable ? "checked" : "")>
                                <label class="form-check-label small" for="includeTitleIfAvailable">
                                    Include Document Titles
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveSettings()">
                        <i class="material-symbols-rounded me-1">save</i>Save Settings
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-download"></i> Esporta Conversazione
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label class="form-label">Formato</label>
                    <select class="form-select" id="exportFormat">
                        <option value="json">JSON</option>
                        <option value="txt">Testo</option>
                        <option value="pdf">PDF</option>
                    </select>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="includeCitations" checked>
                    <label class="form-check-label" for="includeCitations">
                        Includi citazioni
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" onclick="performExport()">
                    <i class="fas fa-download"></i> Esporta
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SignalR CDN - CRITICAL: Load before chat.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

    <!-- Chat functionality -->
    <script src="~/js/chat-integrated.js?v=@DateTime.Now.Ticks"></script>

    <script>
        // Initialize page-specific data
        window.chatData = {
            userId: '@Model.UserId',
            companyId: '@Model.CompanyId',
            settings: @Html.Raw(Json.Serialize(Model.Settings))
        };

        // Initialize chat after DOM and SignalR are ready
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof signalR !== 'undefined') {
                console.log('SignalR library loaded successfully');
                // Initialize integrated chat
                if (typeof ChatManager !== 'undefined') {
                    window.chatManager = new ChatManager();
                    window.chatManager.initialize();
                } else {
                    console.error('ChatManager not found');
                }
            } else {
                console.error('SignalR library failed to load');
            }

            // Initialize settings modal interactions
            initializeSettingsModal();
        });

        function initializeSettingsModal() {
            // Update threshold value display
            const thresholdSlider = document.getElementById('relevanceThreshold');
            const thresholdValue = document.getElementById('thresholdValue');

            if (thresholdSlider && thresholdValue) {
                thresholdSlider.addEventListener('input', function() {
                    thresholdValue.textContent = this.value;
                });
            }

            // Collection checkbox change handler
            document.querySelectorAll('.collection-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    if (window.chatManager) {
                        window.chatManager.updateSelectedCollectionsDisplay();
                    }
                });
            });
        }
    </script>
}
