@model Hybrid.CleverDocs.WebUI.ViewModels.Companies.CompanyDetailsViewModel
@{
    ViewData["Title"] = Model.Company.Name;
    Layout = "_Layout";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                             style="width: 60px; height: 60px; font-size: 1.5rem; font-weight: bold;">
                            @Model.Company.Name.Substring(0, 1).ToUpper()
                        </div>
                    </div>
                    <div>
                        <h1 class="h3 mb-1">@Model.Company.Name</h1>
                        <p class="text-muted mb-0">
                            @if (!string.IsNullOrEmpty(Model.Company.Description))
                            {
                                @Model.Company.Description
                            }
                            else
                            {
                                <span>Company Details</span>
                            }
                        </p>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="material-symbols-rounded me-2">arrow_back</i>Back to List
                    </a>
                    @if (Model.CanEdit)
                    {
                        <a href="@Url.Action("Edit", new { id = Model.Company.Id })" class="btn btn-primary">
                            <i class="material-symbols-rounded me-2">edit</i>Edit Company
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Company Status and R2R Sync -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert @(Model.Company.IsActive ? "alert-success" : "alert-warning") d-flex align-items-center">
                <i class="material-symbols-rounded me-2">
                    @(Model.Company.IsActive ? "check_circle" : "warning")
                </i>
                <div class="flex-grow-1">
                    <strong>Status: @(Model.Company.IsActive ? "Active" : "Inactive")</strong>
                    @if (!string.IsNullOrEmpty(Model.Company.R2RTenantId))
                    {
                        <span class="ms-3">
                            <i class="material-symbols-rounded me-1">sync</i>
                            R2R Tenant ID: <code>@Model.Company.R2RTenantId</code>
                        </span>
                    }
                    else
                    {
                        <span class="ms-3 text-warning">
                            <i class="material-symbols-rounded me-1">sync_problem</i>
                            R2R sync pending...
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="row">
        <!-- Left Column - Company Information -->
        <div class="col-lg-8">
            <!-- Basic Information -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="material-symbols-rounded me-2">info</i>Company Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">Name:</dt>
                                <dd class="col-sm-8">@Model.Company.Name</dd>
                                
                                @if (!string.IsNullOrEmpty(Model.Company.Website))
                                {
                                    <dt class="col-sm-4">Website:</dt>
                                    <dd class="col-sm-8">
                                        <a href="@Model.Company.Website" target="_blank" class="text-decoration-none">
                                            @Model.Company.Website
                                            <i class="material-symbols-rounded ms-1" style="font-size: 14px;">open_in_new</i>
                                        </a>
                                    </dd>
                                }
                                
                                @if (!string.IsNullOrEmpty(Model.Company.ContactEmail))
                                {
                                    <dt class="col-sm-4">Email:</dt>
                                    <dd class="col-sm-8">
                                        <a href="mailto:@Model.Company.ContactEmail" class="text-decoration-none">
                                            @Model.Company.ContactEmail
                                        </a>
                                    </dd>
                                }
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <dl class="row">
                                @if (!string.IsNullOrEmpty(Model.Company.ContactPhone))
                                {
                                    <dt class="col-sm-4">Phone:</dt>
                                    <dd class="col-sm-8">@Model.Company.ContactPhone</dd>
                                }
                                
                                <dt class="col-sm-4">Created:</dt>
                                <dd class="col-sm-8">@Model.Company.CreatedAt.ToString("MMMM dd, yyyy")</dd>
                                
                                @if (Model.Company.UpdatedAt.HasValue)
                                {
                                    <dt class="col-sm-4">Updated:</dt>
                                    <dd class="col-sm-8">@Model.Company.UpdatedAt.Value.ToString("MMMM dd, yyyy")</dd>
                                }
                            </dl>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.Company.Address))
                    {
                        <hr>
                        <dl class="row">
                            <dt class="col-sm-2">Address:</dt>
                            <dd class="col-sm-10">@Model.Company.Address</dd>
                        </dl>
                    }
                </div>
            </div>

            <!-- Usage Statistics -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="material-symbols-rounded me-2">analytics</i>Usage Statistics
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <!-- Users -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="material-symbols-rounded text-primary" style="font-size: 2rem;">group</i>
                                </div>
                                <div>
                                    <h6 class="mb-1">Users</h6>
                                    <div class="progress mb-1" style="height: 8px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @(Model.Company.MaxUsers > 0 ? (Model.Company.UserCount * 100.0 / Model.Company.MaxUsers) : 0)%"></div>
                                    </div>
                                    <small class="text-muted">@Model.Company.UserCount / @Model.Company.MaxUsers</small>
                                </div>
                            </div>
                        </div>

                        <!-- Documents -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="material-symbols-rounded text-success" style="font-size: 2rem;">description</i>
                                </div>
                                <div>
                                    <h6 class="mb-1">Documents</h6>
                                    <div class="progress mb-1" style="height: 8px;">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: @(Model.Company.MaxDocuments > 0 ? (Model.Company.DocumentCount * 100.0 / Model.Company.MaxDocuments) : 0)%"></div>
                                    </div>
                                    <small class="text-muted">@Model.Company.DocumentCount / @Model.Company.MaxDocuments</small>
                                </div>
                            </div>
                        </div>

                        <!-- Collections -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="material-symbols-rounded text-warning" style="font-size: 2rem;">folder</i>
                                </div>
                                <div>
                                    <h6 class="mb-1">Collections</h6>
                                    <div class="progress mb-1" style="height: 8px;">
                                        <div class="progress-bar bg-warning" role="progressbar" 
                                             style="width: @(Model.Company.MaxCollections > 0 ? (Model.Company.CollectionCount * 100.0 / Model.Company.MaxCollections) : 0)%"></div>
                                    </div>
                                    <small class="text-muted">@Model.Company.CollectionCount / @Model.Company.MaxCollections</small>
                                </div>
                            </div>
                        </div>

                        <!-- Storage -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="material-symbols-rounded text-info" style="font-size: 2rem;">storage</i>
                                </div>
                                <div>
                                    <h6 class="mb-1">Storage</h6>
                                    <div class="progress mb-1" style="height: 8px;">
                                        <div class="progress-bar bg-info" role="progressbar" 
                                             style="width: @(Model.Company.MaxStorageBytes > 0 ? (Model.Company.StorageUsed * 100.0 / Model.Company.MaxStorageBytes) : 0)%"></div>
                                    </div>
                                    <small class="text-muted">
                                        @(Math.Round((double)Model.Company.StorageUsed / (1024 * 1024 * 1024), 2)) / 
                                        @(Math.Round((double)Model.Company.MaxStorageBytes / (1024 * 1024 * 1024), 2)) GB
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Actions and R2R Info -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="material-symbols-rounded me-2">settings</i>Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        @if (Model.CanEdit)
                        {
                            <a href="@Url.Action("Edit", new { id = Model.Company.Id })" class="btn btn-outline-primary">
                                <i class="material-symbols-rounded me-2">edit</i>Edit Company
                            </a>
                        }
                        
                        <a href="@Url.Action("Index", "CompanyUsers", new { companyId = Model.Company.Id })" class="btn btn-outline-secondary">
                            <i class="material-symbols-rounded me-2">group</i>Manage Users
                        </a>
                        
                        @if (Model.CanDelete && Model.Company.IsActive)
                        {
                            <button type="button" class="btn btn-outline-danger" 
                                    onclick="deactivateCompany('@Model.Company.Id', '@Model.Company.Name')">
                                <i class="material-symbols-rounded me-2">block</i>Deactivate Company
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- R2R Integration Status -->
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="material-symbols-rounded me-2">integration_instructions</i>R2R Integration
                    </h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Company.R2RTenantId))
                    {
                        <div class="alert alert-success">
                            <i class="material-symbols-rounded me-2">check_circle</i>
                            <strong>Synchronized</strong>
                        </div>
                        <dl class="row small">
                            <dt class="col-sm-5">Tenant ID:</dt>
                            <dd class="col-sm-7"><code>@Model.Company.R2RTenantId</code></dd>
                            
                            <dt class="col-sm-5">Tenant GUID:</dt>
                            <dd class="col-sm-7"><code>@Model.Company.TenantId</code></dd>
                        </dl>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="material-symbols-rounded me-2">sync_problem</i>
                            <strong>Sync Pending</strong>
                            <div class="small mt-1">R2R tenant creation in progress...</div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(Model.Company.R2RApiKey))
                    {
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="material-symbols-rounded me-1" style="font-size: 14px;">key</i>
                                Custom API key configured
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    // Deactivate company
    function deactivateCompany(companyId, companyName) {
        if (confirm(`Are you sure you want to deactivate the company "${companyName}"? This will also deactivate all users in this company.`)) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/Companies/${companyId}/deactivate`;

            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                form.appendChild(tokenInput);
            }

            document.body.appendChild(form);
            form.submit();
        }
    }

    // Auto-refresh R2R status if pending
    @if (string.IsNullOrEmpty(Model.Company.R2RTenantId))
    {
        <text>
        // Check for R2R sync updates every 5 seconds
        setInterval(function() {
            fetch(`/Companies/@Model.Company.Id/r2r-status`)
                .then(response => response.json())
                .then(data => {
                    if (data.r2rTenantId) {
                        location.reload();
                    }
                })
                .catch(error => console.log('R2R status check failed:', error));
        }, 5000);
        </text>
    }
</script>

@Html.AntiForgeryToken()
