@model CollectionListViewModel
@{
    ViewData["Title"] = "Collections";
    Layout = "_Layout";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="fas fa-layer-group text-primary me-2"></i>Collections
                    </h1>
                    <p class="text-muted mb-0">
                        @Model.Collections.Count() of @Model.Pagination.TotalItems collections
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Create")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>New Collection
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <form method="get" id="searchForm" class="d-flex gap-3 align-items-center">
                <!-- Search Input -->
                <div class="flex-grow-1">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text"
                               name="SearchTerm"
                               value="@Model.SearchFilters.SearchTerm"
                               class="form-control border-start-0 ps-0"
                               placeholder="Search collections..."
                               style="box-shadow: none;" />
                    </div>
                </div>

                <!-- Sort Dropdown -->
                <select name="SortBy" class="form-select w-auto" onchange="updateSort()" style="min-width: 150px;">
                    <option value="UpdatedAt" selected="@(Model.SearchFilters.SortBy == "UpdatedAt")">Last Updated</option>
                    <option value="Name" selected="@(Model.SearchFilters.SortBy == "Name")">Name (A-Z)</option>
                    <option value="CreatedAt" selected="@(Model.SearchFilters.SortBy == "CreatedAt")">Date Created</option>
                </select>

                <!-- Sort Direction -->
                <button type="button"
                        class="btn btn-outline-secondary"
                        onclick="toggleSortDirection()"
                        title="@(Model.SearchFilters.SortDirection == "ASC" ? "Ascending" : "Descending")">
                    <i class="fas fa-sort-@(Model.SearchFilters.SortDirection == "ASC" ? "up" : "down")"></i>
                </button>

                <!-- Favorites Filter -->
                <button type="button"
                        class="btn @(Model.SearchFilters.IsFavorite == true ? "btn-warning" : "btn-outline-warning")"
                        onclick="toggleFavoriteFilter()"
                        title="Show only favorites">
                    <i class="fas fa-star"></i>
                </button>

                <!-- Clear Filters -->
                @if (!string.IsNullOrEmpty(Model.SearchFilters.SearchTerm) || Model.SearchFilters.IsFavorite == true)
                {
                    <button type="button"
                            class="btn btn-outline-danger"
                            onclick="clearFilters()"
                            title="Clear all filters">
                        <i class="fas fa-times"></i>
                    </button>
                }
                <!-- Hidden fields -->
                <input type="hidden" name="SortDirection" value="@Model.SearchFilters.SortDirection" id="sortDirection" />
                <input type="hidden" name="IsFavorite" value="@Model.SearchFilters.IsFavorite" id="isFavorite" />
                <input type="hidden" name="Page" value="1" />
                <input type="hidden" name="PageSize" value="@Model.SearchFilters.PageSize" />
            </form>
        </div>
    </div>

    <!-- Collections Grid -->
    <div class="row g-3" id="collectionsGrid">
        @if (Model.Collections.Any())
        {
            @foreach (var collection in Model.Collections)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <div class="card h-100 shadow-sm collection-card" data-collection-id="@collection.Id" style="transition: transform 0.15s ease;">
                        <div class="card-body p-3">
                            <!-- Header with Icon and Favorite -->
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="collection-icon" style="color: @collection.Color; font-size: 2rem;">
                                    <i class="fas fa-@collection.Icon"></i>
                                </div>
                                <button type="button"
                                        class="btn btn-link p-0 favorite-btn @(collection.IsFavorite ? "text-warning" : "text-muted")"
                                        onclick="toggleFavorite('@collection.Id')"
                                        title="@(collection.IsFavorite ? "Remove from favorites" : "Add to favorites")">
                                    <i class="fas fa-star"></i>
                                </button>
                            </div>

                            <!-- Collection Name -->
                            <h6 class="card-title mb-2">
                                <a href="@Url.Action("Details", new { collectionId = collection.Id })"
                                   class="text-decoration-none text-dark fw-bold">
                                    @collection.Name
                                </a>
                            </h6>

                            <!-- Description (if exists) -->
                            @if (!string.IsNullOrEmpty(collection.Description))
                            {
                                <p class="text-muted small mb-2" style="font-size: 0.85rem; line-height: 1.3;">
                                    @(collection.Description.Length > 60 ? collection.Description.Substring(0, 60) + "..." : collection.Description)
                                </p>
                            }

                            <!-- Stats -->
                            <div class="small text-muted mb-2">
                                <span><i class="fas fa-file me-1"></i>@collection.DocumentCount items</span>
                                @if (collection.IsShared)
                                {
                                    <span class="ms-2"><i class="fas fa-share-alt me-1"></i>Shared</span>
                                }
                            </div>

                            <!-- Tags (if any) -->
                            @if (collection.Tags.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var tag in collection.Tags.Take(2))
                                    {
                                        <span class="badge bg-light text-dark me-1" style="font-size: 0.7rem;">@tag</span>
                                    }
                                    @if (collection.Tags.Count > 2)
                                    {
                                        <span class="badge bg-secondary" style="font-size: 0.7rem;">+@(collection.Tags.Count - 2)</span>
                                    }
                                </div>
                            }

                            <!-- Last Updated -->
                            <div class="small text-muted">
                                <i class="fas fa-clock me-1"></i>Updated @collection.RelativeUpdatedAt
                            </div>
                        </div>

                        <!-- Action Buttons (Hidden by default, shown on hover) -->
                        <div class="card-footer bg-transparent border-0 p-2 collection-actions" style="opacity: 0; transition: opacity 0.2s ease;">
                            <div class="d-flex justify-content-end gap-1">
                                <a href="@Url.Action("Details", new { collectionId = collection.Id })"
                                   class="btn btn-sm btn-outline-primary" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                @if (collection.Permissions.CanEdit)
                                {
                                    <a href="@Url.Action("Edit", new { collectionId = collection.Id })"
                                       class="btn btn-sm btn-outline-secondary" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                }
                                @if (collection.Permissions.CanDelete)
                                {
                                    <button type="button"
                                            class="btn btn-sm btn-outline-danger"
                                            onclick="deleteCollection('@collection.Id', '@collection.Name')"
                                            title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="fas fa-folder-open fa-4x text-muted"></i>
                    </div>
                    <h4 class="text-muted">No collections found</h4>
                    <p class="text-muted mb-3">
                        @if (!string.IsNullOrEmpty(Model.SearchFilters.SearchTerm) || Model.SearchFilters.IsFavorite == true)
                        {
                            <span>Try adjusting your search filters or </span>
                        }
                        <a href="@Url.Action("Create")" class="text-decoration-none">create your first collection</a> to get started.
                    </p>
                    <a href="@Url.Action("Create")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Create Collection
                    </a>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.Pagination.TotalPages > 1)
    {
        <div class="row mt-4">
            <div class="col-12">
                <nav aria-label="Collections pagination">
                    <ul class="pagination justify-content-center">
                        @if (Model.Pagination.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchFilters.SearchTerm,
                                    IsFavorite = Model.SearchFilters.IsFavorite,
                                    SortBy = Model.SearchFilters.SortBy,
                                    SortDirection = Model.SearchFilters.SortDirection,
                                    Page = Model.Pagination.CurrentPage - 1,
                                    PageSize = Model.Pagination.PageSize
                                })">Previous</a>
                            </li>
                        }

                        @for (int i = Math.Max(1, Model.Pagination.CurrentPage - 2); i <= Math.Min(Model.Pagination.TotalPages, Model.Pagination.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchFilters.SearchTerm,
                                    IsFavorite = Model.SearchFilters.IsFavorite,
                                    SortBy = Model.SearchFilters.SortBy,
                                    SortDirection = Model.SearchFilters.SortDirection,
                                    Page = i,
                                    PageSize = Model.Pagination.PageSize
                                })">@i</a>
                            </li>
                        }

                        @if (Model.Pagination.CurrentPage < Model.Pagination.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchFilters.SearchTerm,
                                    IsFavorite = Model.SearchFilters.IsFavorite,
                                    SortBy = Model.SearchFilters.SortBy,
                                    SortDirection = Model.SearchFilters.SortDirection,
                                    Page = Model.Pagination.CurrentPage + 1,
                                    PageSize = Model.Pagination.PageSize
                                })">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

<!-- Custom CSS for Modern Collections -->
<style>
    /* Collection Card Hover Effects */
    .collection-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }

    .collection-card:hover .collection-actions {
        opacity: 1 !important;
    }

    /* Mobile: Always show actions */
    .collection-actions-mobile {
        opacity: 1 !important;
    }

    /* Favorite button styling */
    .favorite-btn.text-warning {
        color: #ffc107 !important;
    }

    .favorite-btn:hover {
        color: #ffc107 !important;
    }

    /* Search input styling */
    .input-group-text {
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    /* Card title link styling */
    .card-title a:hover {
        color: #0d6efd !important;
    }

    /* Badge styling for tags */
    .badge.bg-light {
        border: 1px solid #dee2e6;
    }

    /* Responsive grid adjustments */
    .collection-grid-mobile {
        flex: 0 0 100%;
        max-width: 100%;
    }

    .collection-grid-xl {
        flex: 0 0 20%;
        max-width: 20%;
    }
</style>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the collection "<span id="deleteCollectionName"></span>"?</p>
                <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" id="deleteForm" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete Collection</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Collections Functionality -->
<script>
    // Update sort when dropdown changes
    function updateSort() {
        document.getElementById('searchForm').submit();
    }

    // Toggle sort direction
    function toggleSortDirection() {
        const sortDirection = document.getElementById('sortDirection');
        const currentDirection = sortDirection.value;
        sortDirection.value = currentDirection === 'ASC' ? 'DESC' : 'ASC';
        document.getElementById('searchForm').submit();
    }

    // Toggle favorite filter
    function toggleFavoriteFilter() {
        const isFavorite = document.getElementById('isFavorite');
        const currentValue = isFavorite.value;
        isFavorite.value = currentValue === 'true' ? '' : 'true';
        document.getElementById('searchForm').submit();
    }

    // Clear all filters
    function clearFilters() {
        // Clear search term
        document.querySelector('input[name="SearchTerm"]').value = '';
        // Clear favorite filter
        document.getElementById('isFavorite').value = '';
        // Reset sort to default
        document.querySelector('select[name="SortBy"]').value = 'UpdatedAt';
        document.getElementById('sortDirection').value = 'DESC';
        // Submit form
        document.getElementById('searchForm').submit();
    }

    // Toggle favorite status for a collection
    function toggleFavorite(collectionId) {
        fetch(`/Collections/ToggleFavorite/${collectionId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the favorite button
                const favoriteBtn = document.querySelector(`[onclick="toggleFavorite('${collectionId}')"]`);
                if (favoriteBtn) {
                    if (data.isFavorite) {
                        favoriteBtn.classList.remove('text-muted');
                        favoriteBtn.classList.add('text-warning');
                        favoriteBtn.title = 'Remove from favorites';
                    } else {
                        favoriteBtn.classList.remove('text-warning');
                        favoriteBtn.classList.add('text-muted');
                        favoriteBtn.title = 'Add to favorites';
                    }
                }
            }
        })
        .catch(error => {
            console.error('Error toggling favorite:', error);
        });
    }

    // Delete collection
    function deleteCollection(collectionId, collectionName) {
        if (confirm(`Are you sure you want to delete the collection "${collectionName}"? This action cannot be undone.`)) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/Collections/${collectionId}/delete`;

            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                form.appendChild(tokenInput);
            }

            document.body.appendChild(form);
            form.submit();
        }
    }

    // Auto-submit search on Enter key
    document.querySelector('input[name="SearchTerm"]').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            document.getElementById('searchForm').submit();
        }
    });

    // Auto-submit search after typing (debounced)
    let searchTimeout;
    document.querySelector('input[name="SearchTerm"]').addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            if (this.value.length >= 3 || this.value.length === 0) {
                document.getElementById('searchForm').submit();
            }
        }, 500);
    });
</script>
