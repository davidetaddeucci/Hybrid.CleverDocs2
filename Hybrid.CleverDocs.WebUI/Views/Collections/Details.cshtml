@model Hybrid.CleverDocs.WebUI.Models.Collections.CollectionDetailsViewModel
@using Hybrid.CleverDocs.WebUI.Models.Documents

@{
    ViewData["Title"] = $"Collection: {Model.Collection.Name}";
    ViewData["PageTitle"] = Model.Collection.Name;
    ViewData["PageSubtitle"] = Model.Collection.Description;
}

@* Anti-forgery token for CSRF protection *@
@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Collection Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-@Model.Collection.Icon fa-3x" style="color: @Model.Collection.Color;"></i>
                            </div>
                            <div>
                                <h2 class="mb-1">@Model.Collection.Name</h2>
                                <p class="text-muted mb-2">@Model.Collection.Description</p>
                                <div class="d-flex align-items-center gap-3">
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-file-alt me-1"></i>
                                        @Model.DocumentsPagination.TotalItems documents
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-eye me-1"></i>
                                        @Model.Analytics.ViewCount views
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-clock me-1"></i>
                                        Updated @Model.Collection.UpdatedAt.ToString("MMM dd, yyyy")
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary" onclick="toggleFavorite('@Model.Collection.Id')">
                                <i class="fas fa-@(Model.Collection.IsFavorite ? "heart" : "heart-o")"></i>
                                @(Model.Collection.IsFavorite ? "Unfavorite" : "Favorite")
                            </button>
                            <a href="/collections/@Model.Collection.Id/edit" class="btn btn-outline-secondary">
                                <i class="fas fa-edit me-1"></i>
                                Edit
                            </a>
                            <button type="button" class="btn btn-outline-danger" onclick="deleteCollection('@Model.Collection.Id')">
                                <i class="fas fa-trash me-1"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Tags -->
    @if (Model.Collection.Tags != null && Model.Collection.Tags.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Tags</h5>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var tag in Model.Collection.Tags)
                            {
                                <span class="badge bg-secondary">@tag</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Documents Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Documents</h5>
                    <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary btn-sm">
                        <i class="fas fa-plus me-1"></i>
                        Add Document
                    </a>
                </div>
                <div class="card-body">
                    @if (Model.RecentDocuments != null && Model.RecentDocuments.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover documents-table">
                                <thead>
                                    <tr>
                                        <th class="sortable-header" data-column="name" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-file-alt me-2 text-muted"></i>
                                                    Name
                                                </div>
                                                <div class="sort-indicator" data-column="name">
                                                    @if (Model.DocumentsSearch.SortBy == "name")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="content_type" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-tag me-2 text-muted"></i>
                                                    Type
                                                </div>
                                                <div class="sort-indicator" data-column="content_type">
                                                    @if (Model.DocumentsSearch.SortBy == "content_type")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="size" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-weight-hanging me-2 text-muted"></i>
                                                    Size
                                                </div>
                                                <div class="sort-indicator" data-column="size">
                                                    @if (Model.DocumentsSearch.SortBy == "size")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="created_at" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-calendar me-2 text-muted"></i>
                                                    Uploaded
                                                </div>
                                                <div class="sort-indicator" data-column="created_at">
                                                    @if (Model.DocumentsSearch.SortBy == "created_at")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="status" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-info-circle me-2 text-muted"></i>
                                                    Status
                                                </div>
                                                <div class="sort-indicator" data-column="status">
                                                    @if (Model.DocumentsSearch.SortBy == "status")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var document in Model.RecentDocuments)
                                    {
                                        <tr data-document-id="@document.Id">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-file-alt me-2 text-muted"></i>
                                                    <a href="/documents/@document.Id" class="text-decoration-none">
                                                        @document.Name
                                                    </a>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-light text-dark">@document.FileType</span>
                                            </td>
                                            <td>@document.FileSizeFormatted</td>
                                            <td>@document.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                @switch (document.Status)
                                                {
                                                    case "Processing":
                                                        <span class="badge status-badge bg-warning">
                                                            <i class="fas fa-spinner fa-spin me-1"></i>Processing
                                                        </span>
                                                        break;
                                                    case "Completed":
                                                        <span class="badge status-badge bg-success">
                                                            <i class="fas fa-check me-1"></i>Completed
                                                        </span>
                                                        break;
                                                    case "Ready":
                                                        <span class="badge status-badge bg-success">
                                                            <i class="fas fa-check me-1"></i>Ready
                                                        </span>
                                                        break;
                                                    case "Failed":
                                                        <span class="badge status-badge bg-danger">
                                                            <i class="fas fa-exclamation-triangle me-1"></i>Failed
                                                        </span>
                                                        break;
                                                    case "Draft":
                                                        <span class="badge status-badge bg-secondary">
                                                            <i class="fas fa-edit me-1"></i>Draft
                                                        </span>
                                                        break;
                                                    case "Archived":
                                                        <span class="badge status-badge bg-info">
                                                            <i class="fas fa-archive me-1"></i>Archived
                                                        </span>
                                                        break;
                                                    default:
                                                        <span class="badge status-badge bg-light text-dark">@document.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <a href="/documents/@document.Id" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/documents/@document.Id/download" class="btn btn-outline-secondary btn-sm">
                                                        <i class="fas fa-download"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteDocument('@document.Id')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.DocumentsPagination.TotalPages > 1)
                        {
                            <nav aria-label="Documents pagination" class="mt-4">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="text-muted">
                                        Showing @Model.DocumentsPagination.StartItem - @Model.DocumentsPagination.EndItem of @Model.DocumentsPagination.TotalItems documents
                                    </div>
                                    <ul class="pagination mb-0">
                                        @if (Model.DocumentsPagination.HasPreviousPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = Model.DocumentsPagination.CurrentPage - 1,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })" aria-label="Previous">
                                                    <i class="material-symbols-rounded">chevron_left</i>
                                                </a>
                                            </li>
                                        }

                                        @foreach (var pageNumber in Model.DocumentsPagination.GetPageNumbers())
                                        {
                                            <li class="page-item @(pageNumber == Model.DocumentsPagination.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = pageNumber,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })">@pageNumber</a>
                                            </li>
                                        }

                                        @if (Model.DocumentsPagination.HasNextPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = Model.DocumentsPagination.CurrentPage + 1,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })" aria-label="Next">
                                                    <i class="material-symbols-rounded">chevron_right</i>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No documents yet</h5>
                            <p class="text-muted">Start by uploading your first document to this collection.</p>
                            <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i>
                                Upload Document
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Navigation -->
<div class="row mt-4">
    <div class="col-12">
        <a href="/collections" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i>
            Back to Collections
        </a>
    </div>
</div>

@section Styles {
    <style>
        .sortable-header:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .sort-indicator {
            opacity: 0.6;
            transition: opacity 0.2s ease;
        }

        .sortable-header:hover .sort-indicator {
            opacity: 1;
        }

        .sort-indicator .fa-sort {
            font-size: 0.8rem;
        }

        .sort-indicator .fa-sort-up,
        .sort-indicator .fa-sort-down {
            font-size: 0.8rem;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        async function toggleFavorite(collectionId) {
            try {
                // Get anti-forgery token
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Security token not found. Please refresh the page.');
                    return;
                }

                // Use server-side endpoint for secure favorite toggle
                const formData = new FormData();
                formData.append('__RequestVerificationToken', tokenInput.value);

                const response = await fetch(`/collections/${collectionId}/toggle-favorite`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update favorite status');
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
                alert('An error occurred while updating favorite status');
            }
        }

        async function deleteCollection(collectionId) {
            if (!confirm('Are you sure you want to delete this collection? This action cannot be undone.')) {
                return;
            }

            try {
                // Use server-side endpoint for secure collection deletion
                const response = await fetch(`/collections/${collectionId}/delete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    window.location.href = '/collections';
                } else {
                    alert('Failed to delete collection');
                }
            } catch (error) {
                console.error('Error deleting collection:', error);
                alert('An error occurred while deleting the collection');
            }
        }

        class CollectionDetailsManager {
            constructor() {
                this.collectionId = '@Model.Collection.Id';
                this.connection = null;
                this.initializeSignalR();
            }

            async initializeSignalR() {
                try {
                    // Get JWT token from meta tag or cookie
                    const token = document.querySelector('meta[name="jwt-token"]')?.getAttribute('content') ||
                                this.getCookieValue('CleverDocs.AccessToken');

                    if (!token) {
                        console.warn('No JWT token found for SignalR connection');
                        return;
                    }

                    // Initialize SignalR connection
                    this.connection = new signalR.HubConnectionBuilder()
                        .withUrl("http://localhost:5252/hubs/upload", {
                            accessTokenFactory: () => token
                        })
                        .withAutomaticReconnect([0, 2000, 10000, 30000])
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    // Listen for document upload completion
                    this.connection.on("FileUploadCompleted", (fileInfo) => {
                        console.log('Document upload completed:', fileInfo);
                        this.refreshDocumentsList();
                    });

                    // Listen for R2R processing updates (status changes)
                    this.connection.on("R2RProcessingUpdate", (queueItem) => {
                        console.log('R2R processing update:', queueItem);
                        this.handleR2RProcessingUpdate(queueItem);
                    });

                    // Listen for document added/updated events
                    this.connection.on("DocumentUpdated", (eventData) => {
                        console.log('Document updated event:', eventData);
                        this.handleDocumentUpdated(eventData);
                    });

                    // Add missing SignalR client methods to prevent warnings
                    this.connection.on("initialuploadsessions", (data) => {
                        console.log('Initial upload sessions:', data);
                        // Handle initial upload sessions data if needed
                    });

                    this.connection.on("r2rprocessingstatus", (data) => {
                        console.log('R2R processing status:', data);
                        // Handle R2R processing status updates
                        if (data.status === 'Completed') {
                            this.refreshDocumentsList();
                        }
                    });

                    // Start connection
                    await this.connection.start();
                    console.log('SignalR connected for Collection Details');

                } catch (error) {
                    console.error('SignalR connection failed:', error);
                }
            }

            getCookieValue(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            async refreshDocumentsList() {
                try {
                    console.log('Refreshing documents list for collection:', this.collectionId);

                    // Reload the page to show updated documents
                    // In a more sophisticated implementation, we could fetch and update just the documents section
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000); // Wait 2 seconds to ensure database is updated

                } catch (error) {
                    console.error('Error refreshing documents list:', error);
                }
            }

            handleR2RProcessingUpdate(queueItem) {
                console.log('Handling R2R processing update:', queueItem);

                try {
                    // Find the document row by ID
                    const documentRow = document.querySelector(`tr[data-document-id="${queueItem.DocumentId}"]`);
                    if (documentRow) {
                        // Update the status cell
                        const statusCell = documentRow.querySelector('.status-badge');
                        if (statusCell) {
                            const statusText = this.getStatusText(queueItem.Status);
                            const statusClass = this.getStatusClass(queueItem.Status);

                            // Update status badge
                            statusCell.className = `badge status-badge ${statusClass}`;
                            statusCell.textContent = statusText;

                            console.log(`Updated document ${queueItem.DocumentId} status to ${statusText}`);
                        }
                    } else {
                        // If row not found, refresh the entire list
                        console.log('Document row not found, refreshing list');
                        this.refreshDocumentsList();
                    }
                } catch (error) {
                    console.error('Error handling R2R processing update:', error);
                    // Fallback to refresh
                    this.refreshDocumentsList();
                }
            }

            handleDocumentUpdated(eventData) {
                console.log('Handling document updated event:', eventData);

                try {
                    // Check if this event is for the current collection
                    const currentCollectionId = '@Model.Collection.Id';
                    if (eventData.collectionId && eventData.collectionId !== currentCollectionId) {
                        console.log('Document update is for different collection, ignoring');
                        return;
                    }

                    // For document added/updated events, refresh the entire list
                    // This ensures we get the latest data and proper ordering
                    console.log(`Document ${eventData.action}: ${eventData.documentId}, refreshing list`);
                    this.refreshDocumentsList();

                    // Also update the document count in the header
                    this.updateDocumentCountFromServer();
                } catch (error) {
                    console.error('Error handling document updated event:', error);
                    // Fallback to refresh
                    this.refreshDocumentsList();
                }
            }

            getStatusText(status) {
                switch (status) {
                    case 'Queued': return 'Queued';
                    case 'Processing': return 'Processing';
                    case 'Completed': return 'Ready';
                    case 'Failed': return 'Failed';
                    default: return status;
                }
            }

            getStatusClass(status) {
                switch (status) {
                    case 'Queued': return 'badge-warning';
                    case 'Processing': return 'badge-info';
                    case 'Completed': return 'badge-success';
                    case 'Failed': return 'badge-danger';
                    default: return 'badge-secondary';
                }
            }

            refreshDocumentsList() {
                console.log('Refreshing documents list...');
                try {
                    // Reload the current page to get fresh data
                    // This ensures we get the latest documents and proper cache invalidation
                    window.location.reload();
                } catch (error) {
                    console.error('Error refreshing documents list:', error);
                }
            }

            updateDocumentCountFromServer() {
                console.log('Updating document count from server...');
                try {
                    // Make an AJAX call to get the latest collection stats
                    const collectionId = '@Model.Collection.Id';
                    fetch(`/api/collections/${collectionId}/stats`)
                        .then(response => response.json())
                        .then(data => {
                            // Update the document count in the header
                            const countElement = document.querySelector('.collection-stats .document-count');
                            if (countElement && data.documentCount !== undefined) {
                                countElement.textContent = `${data.documentCount} documents`;
                                console.log(`Updated document count to: ${data.documentCount}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching collection stats:', error);
                        });
                } catch (error) {
                    console.error('Error updating document count:', error);
                }
            }
        }

        async function deleteDocument(documentId) {
            if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
                return;
            }

            try {
                // Get anti-forgery token
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Security token not found. Please refresh the page.');
                    return;
                }

                // Show loading state
                const deleteButton = document.querySelector(`button[onclick="deleteDocument('${documentId}')"]`);
                const originalContent = deleteButton?.innerHTML;
                if (deleteButton) {
                    deleteButton.disabled = true;
                    deleteButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                }

                // Use server-side endpoint for secure document deletion
                const formData = new FormData();
                formData.append('__RequestVerificationToken', tokenInput.value);

                const response = await fetch(`/collections/@Model.Collection.Id/documents/${documentId}/delete`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Remove the document row from the table immediately
                        const documentRow = document.querySelector(`tr[data-document-id="${documentId}"]`);
                        if (documentRow) {
                            documentRow.style.transition = 'opacity 0.3s ease';
                            documentRow.style.opacity = '0';
                            setTimeout(() => {
                                documentRow.remove();
                                // Update document count if visible
                                updateDocumentCount();
                            }, 300);
                        } else {
                            // Fallback: refresh the documents list
                            await refreshDocumentsList();
                        }
                    } else {
                        alert('Failed to delete document: ' + (result.message || 'Unknown error'));
                        // Restore button state
                        if (deleteButton && originalContent) {
                            deleteButton.disabled = false;
                            deleteButton.innerHTML = originalContent;
                        }
                    }
                } else {
                    alert('Failed to delete document. Please try again.');
                    // Restore button state
                    if (deleteButton && originalContent) {
                        deleteButton.disabled = false;
                        deleteButton.innerHTML = originalContent;
                    }
                }
            } catch (error) {
                console.error('Error deleting document:', error);
                alert('An error occurred while deleting the document');
                // Restore button state
                const deleteButton = document.querySelector(`button[onclick="deleteDocument('${documentId}')"]`);
                if (deleteButton) {
                    deleteButton.disabled = false;
                    deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                }
            }
        }

        function updateDocumentCount() {
            // Update the document count in the collection header if visible
            const countElement = document.querySelector('.document-count');
            if (countElement) {
                const currentCount = parseInt(countElement.textContent) || 0;
                if (currentCount > 0) {
                    countElement.textContent = currentCount - 1;
                }
            }
        }

        async function refreshDocumentsList() {
            // Refresh the documents list without full page reload
            try {
                const currentUrl = new URL(window.location);
                const response = await fetch(currentUrl.toString(), {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Update the documents table
                    const newTable = doc.querySelector('.documents-table tbody');
                    const currentTable = document.querySelector('.documents-table tbody');

                    if (newTable && currentTable) {
                        currentTable.innerHTML = newTable.innerHTML;
                    }

                    // Update pagination if present
                    const newPagination = doc.querySelector('.pagination-container');
                    const currentPagination = document.querySelector('.pagination-container');

                    if (newPagination && currentPagination) {
                        currentPagination.innerHTML = newPagination.innerHTML;
                    }
                }
            } catch (error) {
                console.error('Error refreshing documents list:', error);
                // Fallback to full page reload
                location.reload();
            }
        }

        // Collection Documents Sorting Manager
        class CollectionDocumentsSortManager {
            constructor(collectionId) {
                this.collectionId = collectionId;
                this.currentSort = {
                    sortBy: '@Model.DocumentsSearch.SortBy',
                    sortDirection: '@Model.DocumentsSearch.SortDirection'
                };
                this.init();
            }

            init() {
                this.setupColumnHeaders();
            }

            setupColumnHeaders() {
                const headers = document.querySelectorAll('.sortable-header');
                headers.forEach(header => {
                    header.addEventListener('click', (e) => {
                        const column = header.getAttribute('data-column');
                        this.handleColumnClick(column);
                    });
                });
            }

            handleColumnClick(column) {
                let newDirection = 'asc';

                // Se stiamo già ordinando per questa colonna, inverti la direzione
                if (this.currentSort.sortBy === column) {
                    newDirection = this.currentSort.sortDirection === 'asc' ? 'desc' : 'asc';
                }

                // Naviga alla stessa pagina con i nuovi parametri di ordinamento
                const url = new URL(window.location);
                url.searchParams.set('sortBy', column);
                url.searchParams.set('sortDirection', newDirection);
                url.searchParams.set('page', '1'); // Reset alla prima pagina

                window.location.href = url.toString();
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            window.collectionDetailsManager = new CollectionDetailsManager();
            window.collectionDocumentsSortManager = new CollectionDocumentsSortManager('@Model.Collection.Id');
        });
    </script>
}
