@model Hybrid.CleverDocs.WebUI.Models.Collections.CollectionDetailsViewModel

@{
    ViewData["Title"] = $"Collection: {Model.Collection.Name}";
    ViewData["PageTitle"] = Model.Collection.Name;
    ViewData["PageSubtitle"] = Model.Collection.Description;
}

<div class="container-fluid">
    <!-- Collection Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-@Model.Collection.Icon fa-3x" style="color: @Model.Collection.Color;"></i>
                            </div>
                            <div>
                                <h2 class="mb-1">@Model.Collection.Name</h2>
                                <p class="text-muted mb-2">@Model.Collection.Description</p>
                                <div class="d-flex align-items-center gap-3">
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-file-alt me-1"></i>
                                        @Model.Collection.DocumentCount documents
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-eye me-1"></i>
                                        @Model.Analytics.ViewCount views
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-clock me-1"></i>
                                        Updated @Model.Collection.UpdatedAt.ToString("MMM dd, yyyy")
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary" onclick="toggleFavorite('@Model.Collection.Id')">
                                <i class="fas fa-@(Model.Collection.IsFavorite ? "heart" : "heart-o")"></i>
                                @(Model.Collection.IsFavorite ? "Unfavorite" : "Favorite")
                            </button>
                            <a href="/collections/@Model.Collection.Id/edit" class="btn btn-outline-secondary">
                                <i class="fas fa-edit me-1"></i>
                                Edit
                            </a>
                            <button type="button" class="btn btn-outline-danger" onclick="deleteCollection('@Model.Collection.Id')">
                                <i class="fas fa-trash me-1"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Tags -->
    @if (Model.Collection.Tags != null && Model.Collection.Tags.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Tags</h5>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var tag in Model.Collection.Tags)
                            {
                                <span class="badge bg-secondary">@tag</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Documents Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Documents</h5>
                    <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary btn-sm">
                        <i class="fas fa-plus me-1"></i>
                        Add Document
                    </a>
                </div>
                <div class="card-body">
                    @if (Model.RecentDocuments != null && Model.RecentDocuments.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Size</th>
                                        <th>Uploaded</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var document in Model.RecentDocuments)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-file-alt me-2 text-muted"></i>
                                                    <a href="/documents/@document.Id" class="text-decoration-none">
                                                        @document.Name
                                                    </a>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-light text-dark">@document.FileType</span>
                                            </td>
                                            <td>@document.FileSizeFormatted</td>
                                            <td>@document.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                @switch (document.Status)
                                                {
                                                    case "Processing":
                                                        <span class="badge bg-warning">Processing</span>
                                                        break;
                                                    case "Completed":
                                                        <span class="badge bg-success">Completed</span>
                                                        break;
                                                    case "Failed":
                                                        <span class="badge bg-danger">Failed</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@document.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <a href="/documents/@document.Id" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/documents/@document.Id/download" class="btn btn-outline-secondary btn-sm">
                                                        <i class="fas fa-download"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteDocument('@document.Id')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No documents yet</h5>
                            <p class="text-muted">Start by uploading your first document to this collection.</p>
                            <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i>
                                Upload Document
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Navigation -->
<div class="row mt-4">
    <div class="col-12">
        <a href="/collections" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i>
            Back to Collections
        </a>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleFavorite(collectionId) {
            try {
                const response = await fetch(`/api/collections/${collectionId}/favorite`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update favorite status');
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
                alert('An error occurred while updating favorite status');
            }
        }

        async function deleteCollection(collectionId) {
            if (!confirm('Are you sure you want to delete this collection? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/api/collections/${collectionId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (response.ok) {
                    window.location.href = '/collections';
                } else {
                    alert('Failed to delete collection');
                }
            } catch (error) {
                console.error('Error deleting collection:', error);
                alert('An error occurred while deleting the collection');
            }
        }

        async function deleteDocument(documentId) {
            if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/api/documents/${documentId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to delete document');
                }
            } catch (error) {
                console.error('Error deleting document:', error);
                alert('An error occurred while deleting the document');
            }
        }
    </script>
}
