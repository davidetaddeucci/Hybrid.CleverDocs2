@model Hybrid.CleverDocs.WebUI.Models.Collections.CollectionDetailsViewModel
@using Hybrid.CleverDocs.WebUI.Models.Documents

@{
    ViewData["Title"] = $"Collection: {Model.Collection.Name}";
    ViewData["PageTitle"] = Model.Collection.Name;
    ViewData["PageSubtitle"] = Model.Collection.Description;
}

@* Anti-forgery token for CSRF protection *@
@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Collection Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-@Model.Collection.Icon fa-3x" style="color: @Model.Collection.Color;"></i>
                            </div>
                            <div>
                                <h2 class="mb-1">@Model.Collection.Name</h2>
                                <p class="text-muted mb-2">@Model.Collection.Description</p>
                                <div class="d-flex align-items-center gap-3 collection-stats">
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-file-alt me-1"></i>
                                        <span class="document-count">@Model.DocumentsPagination.TotalItems documents</span>
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-eye me-1"></i>
                                        @Model.Analytics.ViewCount views
                                    </span>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-clock me-1"></i>
                                        Updated @Model.Collection.UpdatedAt.ToString("MMM dd, yyyy")
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary" onclick="toggleFavorite('@Model.Collection.Id')">
                                <i class="fas fa-@(Model.Collection.IsFavorite ? "heart" : "heart-o")"></i>
                                @(Model.Collection.IsFavorite ? "Unfavorite" : "Favorite")
                            </button>
                            <a href="/collections/@Model.Collection.Id/edit" class="btn btn-outline-secondary">
                                <i class="fas fa-edit me-1"></i>
                                Edit
                            </a>
                            <button type="button" class="btn btn-outline-danger" onclick="deleteCollection('@Model.Collection.Id')">
                                <i class="fas fa-trash me-1"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Tags -->
    @if (Model.Collection.Tags != null && Model.Collection.Tags.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Tags</h5>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var tag in Model.Collection.Tags)
                            {
                                <span class="badge bg-secondary">@tag</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Documents Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Documents</h5>
                    <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary btn-sm">
                        <i class="fas fa-plus me-1"></i>
                        Add Document
                    </a>
                </div>
                <div class="card-body">
                    @if (Model.RecentDocuments != null && Model.RecentDocuments.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover documents-table">
                                <thead>
                                    <tr>
                                        <th class="sortable-header" data-column="name" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-file-alt me-2 text-muted"></i>
                                                    Name
                                                </div>
                                                <div class="sort-indicator" data-column="name">
                                                    @if (Model.DocumentsSearch.SortBy == "name")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="content_type" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-tag me-2 text-muted"></i>
                                                    Type
                                                </div>
                                                <div class="sort-indicator" data-column="content_type">
                                                    @if (Model.DocumentsSearch.SortBy == "content_type")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="size" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-weight-hanging me-2 text-muted"></i>
                                                    Size
                                                </div>
                                                <div class="sort-indicator" data-column="size">
                                                    @if (Model.DocumentsSearch.SortBy == "size")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="created_at" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-calendar me-2 text-muted"></i>
                                                    Uploaded
                                                </div>
                                                <div class="sort-indicator" data-column="created_at">
                                                    @if (Model.DocumentsSearch.SortBy == "created_at")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th class="sortable-header" data-column="status" style="cursor: pointer; user-select: none;">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-info-circle me-2 text-muted"></i>
                                                    Status
                                                </div>
                                                <div class="sort-indicator" data-column="status">
                                                    @if (Model.DocumentsSearch.SortBy == "status")
                                                    {
                                                        <i class="fas fa-sort-@(Model.DocumentsSearch.SortDirection == SortDirection.Asc ? "up" : "down") text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-sort text-muted"></i>
                                                    }
                                                </div>
                                            </div>
                                        </th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var document in Model.RecentDocuments)
                                    {
                                        <tr data-document-id="@document.Id">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-file-alt me-2 text-muted"></i>
                                                    <a href="/documents/@document.Id" class="text-decoration-none">
                                                        @document.Name
                                                    </a>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-light text-dark">@document.FileType</span>
                                            </td>
                                            <td>@document.FileSizeFormatted</td>
                                            <td>@document.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                @switch (document.Status)
                                                {
                                                    case "Processing":
                                                        <span class="badge status-badge bg-warning">
                                                            <i class="fas fa-spinner fa-spin me-1"></i>Processing
                                                        </span>
                                                        break;
                                                    case "Completed":
                                                        <span class="badge status-badge bg-success">
                                                            <i class="fas fa-check me-1"></i>Completed
                                                        </span>
                                                        break;
                                                    case "Ready":
                                                        <span class="badge status-badge bg-success">
                                                            <i class="fas fa-check me-1"></i>Ready
                                                        </span>
                                                        break;
                                                    case "Failed":
                                                        <span class="badge status-badge bg-danger"
                                                              data-bs-toggle="tooltip"
                                                              data-bs-placement="top"
                                                              title="@(document.ProcessingError ?? "R2R processing failed")">
                                                            <i class="fas fa-exclamation-triangle me-1"></i>Failed
                                                        </span>
                                                        break;
                                                    case "Draft":
                                                        <span class="badge status-badge bg-secondary">
                                                            <i class="fas fa-edit me-1"></i>Draft
                                                        </span>
                                                        break;
                                                    case "Archived":
                                                        <span class="badge status-badge bg-info">
                                                            <i class="fas fa-archive me-1"></i>Archived
                                                        </span>
                                                        break;
                                                    default:
                                                        <span class="badge status-badge bg-light text-dark">@document.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <a href="/documents/@document.Id" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/documents/@document.Id/download" class="btn btn-outline-secondary btn-sm">
                                                        <i class="fas fa-download"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteDocument('@document.Id')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.DocumentsPagination.TotalPages > 1)
                        {
                            <nav aria-label="Documents pagination" class="mt-4">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="text-muted">
                                        Showing @Model.DocumentsPagination.StartItem - @Model.DocumentsPagination.EndItem of @Model.DocumentsPagination.TotalItems documents
                                    </div>
                                    <ul class="pagination mb-0">
                                        @if (Model.DocumentsPagination.HasPreviousPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = Model.DocumentsPagination.CurrentPage - 1,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })" aria-label="Previous">
                                                    <i class="material-symbols-rounded">chevron_left</i>
                                                </a>
                                            </li>
                                        }

                                        @foreach (var pageNumber in Model.DocumentsPagination.GetPageNumbers())
                                        {
                                            <li class="page-item @(pageNumber == Model.DocumentsPagination.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = pageNumber,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })">@pageNumber</a>
                                            </li>
                                        }

                                        @if (Model.DocumentsPagination.HasNextPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Details", new {
                                                    collectionId = Model.Collection.Id,
                                                    page = Model.DocumentsPagination.CurrentPage + 1,
                                                    pageSize = Model.DocumentsPagination.PageSize,
                                                    sortBy = Model.DocumentsSearch.SortBy,
                                                    sortDirection = Model.DocumentsSearch.SortDirection
                                                })" aria-label="Next">
                                                    <i class="material-symbols-rounded">chevron_right</i>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No documents yet</h5>
                            <p class="text-muted">Start by uploading your first document to this collection.</p>
                            <a href="/documents/upload?collectionId=@Model.Collection.Id" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i>
                                Upload Document
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Navigation -->
<div class="row mt-4">
    <div class="col-12">
        <a href="/collections" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i>
            Back to Collections
        </a>
    </div>
</div>

@section Styles {
    <style>
        .sortable-header:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .sort-indicator {
            opacity: 0.6;
            transition: opacity 0.2s ease;
        }

        .sortable-header:hover .sort-indicator {
            opacity: 1;
        }

        .sort-indicator .fa-sort {
            font-size: 0.8rem;
        }

        .sort-indicator .fa-sort-up,
        .sort-indicator .fa-sort-down {
            font-size: 0.8rem;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        async function toggleFavorite(collectionId) {
            try {
                // Get anti-forgery token
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Security token not found. Please refresh the page.');
                    return;
                }

                // Use server-side endpoint for secure favorite toggle
                const formData = new FormData();
                formData.append('__RequestVerificationToken', tokenInput.value);

                const response = await fetch(`/collections/${collectionId}/toggle-favorite`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update favorite status');
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
                alert('An error occurred while updating favorite status');
            }
        }

        async function deleteCollection(collectionId) {
            if (!confirm('Are you sure you want to delete this collection? This action cannot be undone.')) {
                return;
            }

            try {
                // Use server-side endpoint for secure collection deletion
                const response = await fetch(`/collections/${collectionId}/delete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    window.location.href = '/collections';
                } else {
                    alert('Failed to delete collection');
                }
            } catch (error) {
                console.error('Error deleting collection:', error);
                alert('An error occurred while deleting the collection');
            }
        }

        class CollectionDetailsManager {
            constructor() {
                this.collectionId = '@Model.Collection.Id';
                this.connection = null;
                this.initializeSignalR();
            }

            async initializeSignalR() {
                try {
                    // Get JWT token from meta tag or cookie
                    const token = document.querySelector('meta[name="jwt-token"]')?.getAttribute('content') ||
                                this.getCookieValue('CleverDocs.AccessToken');

                    if (!token) {
                        console.warn('No JWT token found for SignalR connection');
                        return;
                    }

                    // Initialize SignalR connection
                    this.connection = new signalR.HubConnectionBuilder()
                        .withUrl("http://localhost:5252/hubs/upload", {
                            accessTokenFactory: () => token
                        })
                        .withAutomaticReconnect([0, 2000, 10000, 30000])
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    // Listen for document upload completion
                    this.connection.on("FileUploadCompleted", (fileInfo) => {
                        console.log('🎉 SignalR Event Received - Document upload completed:', fileInfo);
                        console.log('Connection state:', this.connection.state);
                        console.log('Document ID:', fileInfo.documentId);
                        console.log('Collection ID:', fileInfo.collectionId);
                        console.log('Action:', fileInfo.action);
                        console.log('Timestamp:', fileInfo.timestamp);

                        // Check if this event is for the current collection
                        const currentCollectionId = '@Model.Collection.Id';
                        if (fileInfo.collectionId && fileInfo.collectionId !== currentCollectionId) {
                            console.log('Document upload completion is for different collection, ignoring');
                            return;
                        }

                        // Try targeted update first, then fallback to full refresh
                        if (fileInfo.documentId) {
                            // Set status to completed for the targeted update
                            const updateData = {
                                documentId: fileInfo.documentId,
                                status: 'completed',
                                action: fileInfo.action
                            };
                            this.handleR2RProcessingUpdate(updateData);
                        } else {
                            // Fallback: refresh the entire documents list
                            this.refreshDocumentsList();
                        }

                        // Show a success notification
                        if (fileInfo.action === 'completed') {
                            console.log('✅ Document processing completed successfully');
                        }
                    });

                    // Listen for R2R processing updates (status changes)
                    this.connection.on("R2RProcessingUpdate", (queueItem) => {
                        console.log('R2R processing update:', queueItem);
                        this.handleR2RProcessingUpdate(queueItem);
                    });

                    // Listen for document added/updated events
                    this.connection.on("DocumentUpdated", (eventData) => {
                        console.log('Document updated event:', eventData);
                        this.handleDocumentUpdated(eventData);
                    });

                    // Add missing SignalR client methods to prevent warnings
                    this.connection.on("initialuploadsessions", (data) => {
                        console.log('Initial upload sessions:', data);
                        // Handle initial upload sessions data if needed
                    });

                    this.connection.on("r2rprocessingstatus", (data) => {
                        console.log('R2R processing status:', data);
                        // Handle R2R processing status updates
                        if (data.status === 'Completed') {
                            this.refreshDocumentsList();
                        }
                    });

                    // CRITICAL FIX: Add missing SignalR event handlers for document deletion
                    this.connection.on("DocumentDeletionProgress", (data) => {
                        console.log('🗑️ Document deletion progress:', data);
                        this.handleDocumentDeletionProgress(data);
                    });

                    this.connection.on("DocumentDeletionCompleted", (data) => {
                        console.log('✅ Document deletion completed:', data);
                        this.handleDocumentDeletionCompleted(data);
                    });

                    this.connection.on("DocumentDeletionError", (data) => {
                        console.error('❌ Document deletion error:', data);
                        this.handleDocumentDeletionError(data);
                    });

                    // Start connection and wait for it to be fully established
                    await this.connection.start();
                    console.log('SignalR connected for Collection Details');

                    // Wait a moment to ensure the connection is fully established and added to the group
                    await new Promise(resolve => setTimeout(resolve, 500));
                    console.log('SignalR connection fully established and ready for events');

                } catch (error) {
                    console.error('SignalR connection failed:', error);
                }
            }

            getCookieValue(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            async refreshDocumentsList() {
                try {
                    console.log('Refreshing documents list for collection:', this.collectionId);

                    // Fetch updated documents list via AJAX instead of full page reload
                    const response = await fetch(`/api/UserDocuments/collections/${this.collectionId}?page=1&pageSize=10&sortBy=updated_at&sortDirection=Desc`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${this.getCookieValue('CleverDocs.AccessToken')}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success && result.data) {
                            this.updateDocumentsTable(result.data.items);
                            console.log('Documents list updated successfully');
                        }
                    } else {
                        console.error('Failed to fetch updated documents:', response.status);
                        // Fallback to page reload only if AJAX fails
                        setTimeout(() => window.location.reload(), 1000);
                    }

                } catch (error) {
                    console.error('Error refreshing documents list:', error);
                    // Fallback to page reload on error
                    setTimeout(() => window.location.reload(), 1000);
                }
            }

            updateDocumentsTable(documents) {
                try {
                    const tableBody = document.querySelector('#documentsTable tbody');
                    if (!tableBody) {
                        console.error('Documents table body not found');
                        return;
                    }

                    // Clear existing rows
                    tableBody.innerHTML = '';

                    // Add new rows
                    documents.forEach(doc => {
                        const row = this.createDocumentRow(doc);
                        tableBody.appendChild(row);
                    });

                    // CRITICAL FIX: Initialize tooltips after updating table
                    this.initializeTooltips();

                    console.log(`Updated documents table with ${documents.length} documents`);
                } catch (error) {
                    console.error('Error updating documents table:', error);
                }
            }

            createDocumentRow(doc) {
                const row = document.createElement('tr');
                row.setAttribute('data-document-id', doc.id);

                const statusText = this.mapDocumentStatusForCollectionView(doc.status);
                const statusClass = this.getStatusClassFromDocumentStatus(doc.status);

                // CRITICAL FIX: Add error tooltip for failed documents
                const isFailedStatus = doc.status === 4 || statusText === 'Fallito' || statusText === 'Failed';
                const errorTooltip = isFailedStatus && doc.errorMessage ?
                    `data-bs-toggle="tooltip" data-bs-placement="top" title="${this.escapeHtml(doc.errorMessage)}"` : '';

                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <i class="fas fa-file-pdf text-danger me-2"></i>
                            <div>
                                <div class="fw-medium">${this.escapeHtml(doc.name)}</div>
                                <small class="text-muted">${this.formatFileSize(doc.size)}</small>
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="badge status-badge ${statusClass}" ${errorTooltip}>${statusText}</span>
                    </td>
                    <td>
                        <small class="text-muted">${this.formatDate(doc.updatedAt)}</small>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="viewDocument('${doc.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteDocument('${doc.id}', '${this.escapeHtml(doc.name)}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;

                // CRITICAL FIX: Initialize tooltips for the new row
                this.initializeTooltips(row);

                return row;
            }

            // CRITICAL FIX: Initialize Bootstrap tooltips
            initializeTooltips(container = document) {
                try {
                    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                        // Find all elements with tooltip attributes
                        const tooltipElements = container.querySelectorAll('[data-bs-toggle="tooltip"]');
                        tooltipElements.forEach(element => {
                            // Dispose existing tooltip if any
                            const existingTooltip = bootstrap.Tooltip.getInstance(element);
                            if (existingTooltip) {
                                existingTooltip.dispose();
                            }
                            // Create new tooltip
                            new bootstrap.Tooltip(element);
                        });
                    }
                } catch (error) {
                    console.error('Error initializing tooltips:', error);
                }
            }

            handleR2RProcessingUpdate(queueItem) {
                console.log('Handling R2R processing update:', queueItem);

                try {
                    // Handle both DocumentId (capital D) and documentId (lowercase d) properties
                    const documentId = queueItem.DocumentId || queueItem.documentId;
                    if (!documentId) {
                        console.warn('No document ID found in R2R processing update:', queueItem);
                        this.refreshDocumentsList();
                        return;
                    }

                    // Find the document row by ID
                    const documentRow = document.querySelector(`tr[data-document-id="${documentId}"]`);
                    if (documentRow) {
                        // Update the status cell
                        const statusCell = documentRow.querySelector('.status-badge');
                        if (statusCell) {
                            // Handle both Status (enum) and status (string) properties
                            const status = queueItem.Status || queueItem.status;
                            const statusText = this.getStatusText(status);
                            const statusClass = this.getStatusClass(status);

                            // CRITICAL FIX: Add error tooltip for failed R2R processing
                            const isFailedStatus = status === 3 || status === 'Failed' || status === 'failed';
                            const errorMessage = queueItem.ErrorMessage || queueItem.errorMessage;

                            // Update status badge with icon
                            statusCell.className = `badge status-badge ${statusClass}`;
                            statusCell.innerHTML = this.getStatusHtmlWithIcon(statusText);

                            // Add or remove tooltip based on status
                            if (isFailedStatus && errorMessage) {
                                statusCell.setAttribute('data-bs-toggle', 'tooltip');
                                statusCell.setAttribute('data-bs-placement', 'top');
                                statusCell.setAttribute('title', this.escapeHtml(errorMessage));

                                // Initialize tooltip if Bootstrap is available
                                if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                                    new bootstrap.Tooltip(statusCell);
                                }
                            } else {
                                // Remove tooltip attributes for non-failed statuses
                                statusCell.removeAttribute('data-bs-toggle');
                                statusCell.removeAttribute('data-bs-placement');
                                statusCell.removeAttribute('title');
                            }

                            console.log(`Updated document ${documentId} status to ${statusText}${isFailedStatus && errorMessage ? ' with error tooltip' : ''}`);
                        }
                    } else {
                        // If row not found, refresh the entire list
                        console.log(`Document row not found for ID ${documentId}, refreshing list`);
                        this.refreshDocumentsList();
                    }
                } catch (error) {
                    console.error('Error handling R2R processing update:', error);
                    // Fallback to refresh
                    this.refreshDocumentsList();
                }
            }

            handleDocumentUpdated(eventData) {
                console.log('Handling document updated event:', eventData);

                try {
                    // Check if this event is for the current collection
                    const currentCollectionId = '@Model.Collection.Id';
                    if (eventData.collectionId && eventData.collectionId !== currentCollectionId) {
                        console.log('Document update is for different collection, ignoring');
                        return;
                    }

                    // For document added/updated events, refresh the entire list
                    // This ensures we get the latest data and proper ordering
                    console.log(`Document ${eventData.action}: ${eventData.documentId}, refreshing list`);
                    this.refreshDocumentsList();

                    // Also update the document count in the header
                    this.updateDocumentCountFromServer();
                } catch (error) {
                    console.error('Error handling document updated event:', error);
                    // Fallback to refresh
                    this.refreshDocumentsList();
                }
            }

            getStatusText(status) {
                // Handle both string and enum values
                const statusStr = typeof status === 'string' ? status : this.convertEnumToString(status);

                switch (statusStr) {
                    case 'Queued':
                    case 'queued':
                    case '0': return 'Queued';
                    case 'Processing':
                    case 'processing':
                    case '1': return 'Processing';
                    case 'Completed':
                    case 'completed':
                    case '2': return 'Completed';
                    case 'Failed':
                    case 'failed':
                    case '3': return 'Failed';
                    default: return statusStr || 'Unknown';
                }
            }

            getStatusClass(status) {
                // Handle both string and enum values
                const statusStr = typeof status === 'string' ? status : this.convertEnumToString(status);

                switch (statusStr) {
                    case 'Queued':
                    case 'queued':
                    case '0': return 'bg-warning';
                    case 'Processing':
                    case 'processing':
                    case '1': return 'bg-info';
                    case 'Completed':
                    case 'completed':
                    case '2': return 'bg-success';
                    case 'Failed':
                    case 'failed':
                    case '3': return 'bg-danger';
                    default: return 'bg-secondary';
                }
            }

            getStatusHtmlWithIcon(statusText) {
                // Return status text with appropriate icon to match server-side rendering
                switch (statusText) {
                    case 'Processing':
                        return '<i class="fas fa-spinner fa-spin me-1"></i>Processing';
                    case 'Completed':
                        return '<i class="fas fa-check me-1"></i>Completed';
                    case 'Failed':
                        return '<i class="fas fa-exclamation-triangle me-1"></i>Failed';
                    case 'Queued':
                        return '<i class="fas fa-clock me-1"></i>Queued';
                    case 'Draft':
                        return '<i class="fas fa-edit me-1"></i>Draft';
                    case 'Archived':
                        return '<i class="fas fa-archive me-1"></i>Archived';
                    default:
                        return statusText; // No icon for unknown statuses
                }
            }

            convertEnumToString(enumValue) {
                // Convert R2RProcessingStatusDto enum values to strings
                switch (enumValue) {
                    case 0: return 'Queued';
                    case 1: return 'Processing';
                    case 2: return 'Completed';
                    case 3: return 'Failed';
                    default: return enumValue?.toString() || 'Unknown';
                }
            }

            // Helper methods for document status mapping and formatting
            mapDocumentStatusForCollectionView(status) {
                switch (status) {
                    case 0: return 'Draft';
                    case 1: return 'Processing';
                    case 2: return 'Completed';
                    case 3: return 'Error';
                    case 4: return 'Archived';
                    case 5: return 'Deleted';
                    default: return 'Unknown';
                }
            }

            getStatusClassFromDocumentStatus(status) {
                switch (status) {
                    case 0: return 'bg-secondary'; // Draft
                    case 1: return 'bg-warning';   // Processing
                    case 2: return 'bg-success';   // Completed
                    case 3: return 'bg-danger';    // Error
                    case 4: return 'bg-info';      // Archived
                    case 5: return 'bg-dark';      // Deleted
                    default: return 'bg-secondary';
                }
            }

            // Utility methods
            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('it-IT', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            getCookieValue(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            async refreshDocumentsList() {
                console.log('Refreshing documents list via AJAX...');
                try {
                    // Use AJAX to fetch fresh data with cache-busting headers
                    const collectionId = '@Model.Collection.Id';
                    const response = await fetch(`/api/UserDocuments/collections/${collectionId}?page=1&pageSize=20&_t=${Date.now()}`, {
                        method: 'GET',
                        headers: {
                            'Cache-Control': 'no-cache, no-store, must-revalidate',
                            'Pragma': 'no-cache',
                            'Expires': '0',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success && result.data && result.data.items) {
                            this.updateDocumentsTable(result.data.items);
                            this.updateDocumentCountDisplay(result.data.totalCount);
                            console.log(`Successfully refreshed documents list: ${result.data.items.length} documents`);
                        } else {
                            console.error('Invalid response format:', result);
                            // Fallback to page reload
                            window.location.reload();
                        }
                    } else {
                        console.error('Failed to fetch documents:', response.status);
                        // Fallback to page reload
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('Error refreshing documents list:', error);
                    // Fallback to page reload
                    window.location.reload();
                }
            }

            updateDocumentCountDisplay(totalCount) {
                console.log(`Updating document count display to: ${totalCount}`);
                try {
                    // Update the document count in the collection header
                    const countElements = document.querySelectorAll('.document-count, .collection-stats .document-count');
                    countElements.forEach(element => {
                        if (element) {
                            element.textContent = `${totalCount} documents`;
                        }
                    });

                    // Also update any other count displays
                    const headerCountElement = document.querySelector('.collection-header .document-count');
                    if (headerCountElement) {
                        headerCountElement.textContent = `${totalCount} documents`;
                    }
                } catch (error) {
                    console.error('Error updating document count display:', error);
                }
            }

            updateDocumentCountFromServer() {
                console.log('Updating document count from server...');
                try {
                    // Make an AJAX call to get the latest collection stats
                    const collectionId = '@Model.Collection.Id';
                    fetch(`/api/collections/${collectionId}/stats`)
                        .then(response => response.json())
                        .then(data => {
                            // Update the document count in the header
                            const countElement = document.querySelector('.collection-stats .document-count');
                            if (countElement && data.documentCount !== undefined) {
                                countElement.textContent = `${data.documentCount} documents`;
                                console.log(`Updated document count to: ${data.documentCount}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching collection stats:', error);
                        });
                } catch (error) {
                    console.error('Error updating document count:', error);
                }
            }

            // CRITICAL FIX: Add SignalR event handlers for document deletion
            handleDocumentDeletionProgress(data) {
                console.log('🗑️ Handling document deletion progress:', data);
                try {
                    const { documentId, status, message } = data;

                    // Find the document row and show progress
                    const documentRow = document.querySelector(`tr[data-document-id="${documentId}"]`);
                    if (documentRow) {
                        // Update the status cell or add a progress indicator
                        const statusCell = documentRow.querySelector('.status-badge');
                        if (statusCell) {
                            statusCell.className = 'badge bg-warning text-dark';
                            statusCell.textContent = 'Deleting...';
                        }

                        // Disable action buttons during deletion
                        const actionButtons = documentRow.querySelectorAll('button');
                        actionButtons.forEach(button => {
                            button.disabled = true;
                            if (button.innerHTML.includes('fa-trash')) {
                                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                            }
                        });
                    }

                    console.log(`Document ${documentId} deletion progress: ${status} - ${message}`);
                } catch (error) {
                    console.error('Error handling document deletion progress:', error);
                }
            }

            handleDocumentDeletionCompleted(data) {
                console.log('✅ Handling document deletion completed:', data);
                try {
                    const { documentId, success, message } = data;

                    if (success) {
                        // CRITICAL FIX: Properly refresh the data grid with pagination
                        this.refreshDocumentsListWithPagination();
                        console.log(`Document ${documentId} deleted successfully: ${message}`);
                    } else {
                        // Re-enable buttons and show error
                        const documentRow = document.querySelector(`tr[data-document-id="${documentId}"]`);
                        if (documentRow) {
                            const actionButtons = documentRow.querySelectorAll('button');
                            actionButtons.forEach(button => {
                                button.disabled = false;
                                if (button.innerHTML.includes('fa-spinner')) {
                                    button.innerHTML = '<i class="fas fa-trash"></i>';
                                }
                            });

                            const statusCell = documentRow.querySelector('.status-badge');
                            if (statusCell) {
                                statusCell.className = 'badge bg-danger';
                                statusCell.textContent = 'Error';
                            }
                        }

                        alert(`Failed to delete document: ${message}`);
                        console.error(`Document ${documentId} deletion failed: ${message}`);
                    }
                } catch (error) {
                    console.error('Error handling document deletion completed:', error);
                    // Fallback to refresh
                    this.refreshDocumentsListWithPagination();
                }
            }

            handleDocumentDeletionError(data) {
                console.error('❌ Handling document deletion error:', data);
                try {
                    const { documentId, error } = data;

                    // Re-enable buttons and show error state
                    const documentRow = document.querySelector(`tr[data-document-id="${documentId}"]`);
                    if (documentRow) {
                        const actionButtons = documentRow.querySelectorAll('button');
                        actionButtons.forEach(button => {
                            button.disabled = false;
                            if (button.innerHTML.includes('fa-spinner')) {
                                button.innerHTML = '<i class="fas fa-trash"></i>';
                            }
                        });

                        const statusCell = documentRow.querySelector('.status-badge');
                        if (statusCell) {
                            statusCell.className = 'badge bg-danger';
                            statusCell.textContent = 'Error';
                        }
                    }

                    alert(`Error deleting document: ${error}`);
                    console.error(`Document ${documentId} deletion error: ${error}`);
                } catch (err) {
                    console.error('Error handling document deletion error event:', err);
                }
            }

            // CRITICAL FIX: Enhanced refresh method that properly handles pagination
            async refreshDocumentsListWithPagination() {
                console.log('🔄 Refreshing documents list with proper pagination handling...');
                try {
                    // Get current page parameters
                    const urlParams = new URLSearchParams(window.location.search);
                    const currentPage = parseInt(urlParams.get('page')) || 1;
                    const pageSize = parseInt(urlParams.get('pageSize')) || 10;
                    const sortBy = urlParams.get('sortBy') || 'updated_at';
                    const sortDirection = urlParams.get('sortDirection') || 'Desc';

                    // Fetch updated data from server
                    const collectionId = '@Model.Collection.Id';
                    const response = await fetch(`/api/UserDocuments/collections/${collectionId}?page=${currentPage}&pageSize=${pageSize}&sortBy=${sortBy}&sortDirection=${sortDirection}&_t=${Date.now()}`, {
                        method: 'GET',
                        headers: {
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success && result.data) {
                            const { items, totalCount, currentPage: newCurrentPage, totalPages } = result.data;

                            // Check if current page is now empty (e.g., deleted last item on page)
                            if (items.length === 0 && newCurrentPage > 1) {
                                // Redirect to previous page
                                const newUrl = new URL(window.location);
                                newUrl.searchParams.set('page', newCurrentPage - 1);
                                window.location.href = newUrl.toString();
                                return;
                            }

                            // Update the documents table
                            this.updateDocumentsTable(items);

                            // Update document count display
                            this.updateDocumentCountDisplay(totalCount);

                            // Update pagination
                            this.updatePaginationDisplay(totalCount, newCurrentPage, pageSize, totalPages);

                            console.log(`✅ Successfully refreshed: ${items.length} documents, ${totalCount} total, page ${newCurrentPage}/${totalPages}`);
                        } else {
                            console.error('Invalid response format:', result);
                            // Fallback to page reload
                            window.location.reload();
                        }
                    } else {
                        console.error('Failed to fetch documents:', response.status);
                        // Fallback to page reload
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('Error refreshing documents list with pagination:', error);
                    // Fallback to page reload
                    window.location.reload();
                }
            }

            // CRITICAL FIX: Update pagination display after document changes
            updatePaginationDisplay(totalCount, currentPage, pageSize, totalPages) {
                console.log(`🔄 Updating pagination: ${totalCount} total, page ${currentPage}/${totalPages}`);
                try {
                    // Update pagination info text
                    const startItem = totalCount > 0 ? ((currentPage - 1) * pageSize) + 1 : 0;
                    const endItem = Math.min(currentPage * pageSize, totalCount);

                    const paginationInfo = document.querySelector('.pagination-container .text-muted, nav[aria-label="Documents pagination"] .text-muted');
                    if (paginationInfo) {
                        paginationInfo.textContent = `Showing ${startItem} - ${endItem} of ${totalCount} documents`;
                    }

                    // If total pages changed, we need to reload to update pagination links
                    const urlParams = new URLSearchParams(window.location.search);
                    const urlTotalPages = Math.ceil(totalCount / pageSize);

                    if (totalPages !== urlTotalPages || totalCount === 0) {
                        // Pagination structure changed, reload page to update links
                        console.log('Pagination structure changed, reloading page...');
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                } catch (error) {
                    console.error('Error updating pagination display:', error);
                }
            }
        }

        async function deleteDocument(documentId) {
            if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
                return;
            }

            try {
                // Get anti-forgery token
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Security token not found. Please refresh the page.');
                    return;
                }

                // Show loading state
                const deleteButton = document.querySelector(`button[onclick="deleteDocument('${documentId}')"]`);
                const originalContent = deleteButton?.innerHTML;
                if (deleteButton) {
                    deleteButton.disabled = true;
                    deleteButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                }

                // Use server-side endpoint for secure document deletion
                const formData = new FormData();
                formData.append('__RequestVerificationToken', tokenInput.value);

                const response = await fetch(`/collections/@Model.Collection.Id/documents/${documentId}/delete`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // CRITICAL FIX: Don't manipulate DOM immediately - let SignalR events handle it
                        // The backend will send DocumentDeletionProgress and DocumentDeletionCompleted events
                        // which will be handled by the SignalR event handlers we just added
                        console.log(`✅ Document deletion request sent successfully for ${documentId}`);
                        console.log('⏳ Waiting for SignalR events to handle UI updates...');

                        // The button loading state will be managed by SignalR events
                        // No need to manipulate DOM here
                    } else {
                        alert('Failed to delete document: ' + (result.message || 'Unknown error'));
                        // Restore button state
                        if (deleteButton && originalContent) {
                            deleteButton.disabled = false;
                            deleteButton.innerHTML = originalContent;
                        }
                    }
                } else {
                    alert('Failed to delete document. Please try again.');
                    // Restore button state
                    if (deleteButton && originalContent) {
                        deleteButton.disabled = false;
                        deleteButton.innerHTML = originalContent;
                    }
                }
            } catch (error) {
                console.error('Error deleting document:', error);
                alert('An error occurred while deleting the document');
                // Restore button state
                const deleteButton = document.querySelector(`button[onclick="deleteDocument('${documentId}')"]`);
                if (deleteButton) {
                    deleteButton.disabled = false;
                    deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                }
            }
        }

        function updateDocumentCount() {
            // Update the document count in the collection header if visible
            const countElement = document.querySelector('.document-count');
            if (countElement) {
                const currentText = countElement.textContent;
                const currentCount = parseInt(currentText.match(/\d+/)) || 0;
                if (currentCount > 0) {
                    countElement.textContent = `${currentCount - 1} documents`;
                }
            }
        }

        async function refreshDocumentsList() {
            // CRITICAL FIX: Use the enhanced refresh method with proper pagination handling
            if (window.collectionDetailsManager && window.collectionDetailsManager.refreshDocumentsListWithPagination) {
                await window.collectionDetailsManager.refreshDocumentsListWithPagination();
            } else {
                // Fallback to old method if manager not available
                console.log('CollectionDetailsManager not available, using fallback refresh...');
                try {
                    const currentUrl = new URL(window.location);
                    const response = await fetch(currentUrl.toString(), {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });

                    if (response.ok) {
                        const html = await response.text();
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');

                        // Update the documents table
                        const newTable = doc.querySelector('.documents-table tbody');
                        const currentTable = document.querySelector('.documents-table tbody');

                        if (newTable && currentTable) {
                            currentTable.innerHTML = newTable.innerHTML;
                        }

                        // Update pagination if present
                        const newPagination = doc.querySelector('.pagination-container, nav[aria-label="Documents pagination"]');
                        const currentPagination = document.querySelector('.pagination-container, nav[aria-label="Documents pagination"]');

                        if (newPagination && currentPagination) {
                            currentPagination.innerHTML = newPagination.innerHTML;
                        }

                        // Update document count
                        const newCount = doc.querySelector('.document-count');
                        const currentCount = document.querySelector('.document-count');
                        if (newCount && currentCount) {
                            currentCount.textContent = newCount.textContent;
                        }
                    }
                } catch (error) {
                    console.error('Error refreshing documents list:', error);
                    // Fallback to full page reload
                    location.reload();
                }
            }
        }

        // Collection Documents Sorting Manager
        class CollectionDocumentsSortManager {
            constructor(collectionId) {
                this.collectionId = collectionId;
                this.currentSort = {
                    sortBy: '@Model.DocumentsSearch.SortBy',
                    sortDirection: '@Model.DocumentsSearch.SortDirection'
                };
                this.init();
            }

            init() {
                this.setupColumnHeaders();
            }

            setupColumnHeaders() {
                const headers = document.querySelectorAll('.sortable-header');
                headers.forEach(header => {
                    header.addEventListener('click', (e) => {
                        const column = header.getAttribute('data-column');
                        this.handleColumnClick(column);
                    });
                });
            }

            handleColumnClick(column) {
                let newDirection = 'asc';

                // Se stiamo già ordinando per questa colonna, inverti la direzione
                if (this.currentSort.sortBy === column) {
                    newDirection = this.currentSort.sortDirection === 'asc' ? 'desc' : 'asc';
                }

                // Naviga alla stessa pagina con i nuovi parametri di ordinamento
                const url = new URL(window.location);
                url.searchParams.set('sortBy', column);
                url.searchParams.set('sortDirection', newDirection);
                url.searchParams.set('page', '1'); // Reset alla prima pagina

                window.location.href = url.toString();
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            window.collectionDetailsManager = new CollectionDetailsManager();
            window.collectionDocumentsSortManager = new CollectionDocumentsSortManager('@Model.Collection.Id');

            // CRITICAL FIX: Initialize tooltips for existing content on page load
            if (window.collectionDetailsManager && window.collectionDetailsManager.initializeTooltips) {
                window.collectionDetailsManager.initializeTooltips();
            }
        });
    </script>
}
