@model DocumentDetailsViewModel
@{
    ViewData["Title"] = Model.Document.Name;
    ViewData["PageTitle"] = Model.Document.Name;
    ViewData["Breadcrumb"] = new List<(string Text, string? Url)>
    {
        ("Dashboard", Url.Action("Index", "Home")),
        ("Documents", Url.Action("Index", "Documents")),
        (Model.Document.Name, null)
    };
}

<div class="document-details-page">
    <!-- Document Header -->
    <div class="document-header">
        <div class="document-info">
            <div class="document-icon">
                <i class="@Model.Document.FileTypeIcon"></i>
            </div>
            
            <div class="document-meta">
                <h1 class="document-title">
                    @Model.Document.Name
                    @if (Model.Document.IsFavorite)
                    {
                        <span class="favorite-badge">
                            <i class="icon-star-filled"></i>
                        </span>
                    }
                </h1>
                
                <div class="document-subtitle">
                    <span class="file-size">@Model.Document.FormattedSize</span>
                    <span class="separator">•</span>
                    <span class="file-type">@Model.Document.ContentType</span>
                    <span class="separator">•</span>
                    <span class="last-modified">Modified @Model.Document.RelativeUpdatedTime</span>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Document.Description))
                {
                    <p class="document-description">@Model.Document.Description</p>
                }
                
                @if (Model.Document.Tags.Any())
                {
                    <div class="document-tags">
                        @foreach (var tag in Model.Document.Tags)
                        {
                            <span class="tag">@tag</span>
                        }
                    </div>
                }
            </div>
        </div>
        
        <div class="document-actions">
            @if (Model.Document.CanPreview)
            {
                <a href="@Model.Document.PreviewUrl" target="_blank" class="btn btn-outline">
                    <i class="icon-eye"></i>
                    Preview
                </a>
            }
            
            <a href="@Model.Document.DownloadUrl" class="btn btn-outline">
                <i class="icon-download"></i>
                Download
            </a>
            
            @if (Model.CanEdit)
            {
                <a href="@Url.Action("Edit", new { documentId = Model.Document.Id })" class="btn btn-primary">
                    <i class="icon-edit"></i>
                    Edit
                </a>
            }
            
            <div class="dropdown">
                <button class="btn btn-outline dropdown-toggle" data-bs-toggle="dropdown">
                    <i class="icon-more-vertical"></i>
                    More
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <form method="post" action="@Url.Action("ToggleFavorite", new { documentId = Model.Document.Id })">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="dropdown-item">
                                <i class="icon-star@(Model.Document.IsFavorite ? "-filled" : "")"></i>
                                @(Model.Document.IsFavorite ? "Remove from Favorites" : "Add to Favorites")
                            </button>
                        </form>
                    </li>
                    @if (Model.CanShare)
                    {
                        <li>
                            <a class="dropdown-item" href="#" onclick="shareDocument('@Model.Document.Id')">
                                <i class="icon-share"></i> Share
                            </a>
                        </li>
                    }
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyDocumentLink('@Url.Action("Details", new { documentId = Model.Document.Id }, Request.Scheme)')">
                            <i class="icon-link"></i> Copy Link
                        </a>
                    </li>
                    @if (Model.CanDelete)
                    {
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form method="post" action="@Url.Action("Delete", new { documentId = Model.Document.Id })" 
                                  onsubmit="return confirm('Are you sure you want to delete this document? This action cannot be undone.')">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="dropdown-item text-danger">
                                    <i class="icon-trash"></i> Delete
                                </button>
                            </form>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Document Status -->
    @if (Model.Document.IsProcessing || Model.Document.Status != DocumentStatus.Ready)
    {
        <div class="document-status-section">
            <div class="status-card @Model.Document.StatusBadgeClass">
                <div class="status-info">
                    <div class="status-icon">
                        @if (Model.Document.IsProcessing)
                        {
                            <div class="spinner"></div>
                        }
                        else
                        {
                            <i class="icon-@(Model.Document.Status == DocumentStatus.Ready ? "check" : Model.Document.Status == DocumentStatus.Error ? "alert-circle" : "clock")"></i>
                        }
                    </div>
                    <div class="status-details">
                        <h4>@Model.Document.StatusDisplayName</h4>
                        @if (Model.Document.IsProcessing && Model.Document.ProcessingProgress.HasValue)
                        {
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @((int)(Model.Document.ProcessingProgress.Value * 100))%"></div>
                            </div>
                            <p>Processing... @((int)(Model.Document.ProcessingProgress.Value * 100))% complete</p>
                        }
                        else if (!string.IsNullOrEmpty(Model.Document.ProcessingError))
                        {
                            <p class="error-message">@Model.Document.ProcessingError</p>
                        }
                        else if (Model.Document.Status == DocumentStatus.Ready)
                        {
                            <p>Document is ready for use</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Document Content -->
    <div class="document-content">
        <div class="content-main">
            <!-- Document Preview -->
            @if (Model.Document.CanPreview)
            {
                <div class="document-preview-section">
                    <h3>Preview</h3>
                    <div class="preview-container">
                        @if (Model.Document.ContentType.StartsWith("image/"))
                        {
                            <img src="@Model.Document.PreviewUrl" alt="@Model.Document.Name" class="preview-image" />
                        }
                        else if (Model.Document.ContentType == "application/pdf")
                        {
                            <iframe src="@Model.Document.PreviewUrl" class="preview-iframe" title="Document Preview"></iframe>
                        }
                        else if (Model.Document.ContentType == "text/plain")
                        {
                            <div class="preview-text" id="textPreview">
                                <div class="loading">Loading preview...</div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Document Information -->
            <div class="document-info-section">
                <h3>Document Information</h3>
                <div class="info-grid">
                    <div class="info-item">
                        <label>File Name:</label>
                        <span>@Model.Document.Name</span>
                    </div>
                    <div class="info-item">
                        <label>File Size:</label>
                        <span>@Model.Document.FormattedSize</span>
                    </div>
                    <div class="info-item">
                        <label>File Type:</label>
                        <span>@Model.Document.ContentType</span>
                    </div>
                    <div class="info-item">
                        <label>Created:</label>
                        <span>@Model.Document.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    <div class="info-item">
                        <label>Last Modified:</label>
                        <span>@Model.Document.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    @if (Model.Document.LastViewedAt.HasValue)
                    {
                        <div class="info-item">
                            <label>Last Viewed:</label>
                            <span>@Model.Document.LastViewedAt.Value.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                    }
                    <div class="info-item">
                        <label>View Count:</label>
                        <span>@Model.Document.ViewCount</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Document.Version))
                    {
                        <div class="info-item">
                            <label>Version:</label>
                            <span>@Model.Document.Version</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Document.CollectionName))
                    {
                        <div class="info-item">
                            <label>Collection:</label>
                            <span>
                                <a href="@Url.Action("Collection", new { collectionId = Model.Document.CollectionId })">
                                    @Model.Document.CollectionName
                                </a>
                            </span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Document.R2RDocumentId))
                    {
                        <div class="info-item">
                            <label>R2R Document ID:</label>
                            <span class="monospace">@Model.Document.R2RDocumentId</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Document Metadata -->
            @if (Model.Document.Metadata.Any())
            {
                <div class="document-metadata-section">
                    <h3>Metadata</h3>
                    <div class="metadata-grid">
                        @foreach (var metadata in Model.Document.Metadata)
                        {
                            <div class="metadata-item">
                                <label>@metadata.Key:</label>
                                <span>@metadata.Value</span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="content-sidebar">
            <!-- Related Documents -->
            @if (Model.RelatedDocuments.Any())
            {
                <div class="related-documents-section">
                    <h4>Related Documents</h4>
                    <div class="related-documents">
                        @foreach (var relatedDoc in Model.RelatedDocuments)
                        {
                            <div class="related-document">
                                <div class="document-icon">
                                    <i class="@relatedDoc.FileTypeIcon"></i>
                                </div>
                                <div class="document-info">
                                    <a href="@Url.Action("Details", new { documentId = relatedDoc.Id })" class="document-name">
                                        @relatedDoc.Name
                                    </a>
                                    <div class="document-meta">
                                        <span class="file-size">@relatedDoc.FormattedSize</span>
                                        <span class="file-date">@relatedDoc.RelativeUpdatedTime</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (Model.Document.CollectionId.HasValue)
                    {
                        <div class="view-all-link">
                            <a href="@Url.Action("Collection", new { collectionId = Model.Document.CollectionId })">
                                View all documents in this collection
                            </a>
                        </div>
                    }
                </div>
            }

            <!-- Document Versions -->
            @if (Model.Document.HasVersions && Model.Versions.Any())
            {
                <div class="document-versions-section">
                    <h4>Versions</h4>
                    <div class="versions-list">
                        @foreach (var version in Model.Versions)
                        {
                            <div class="version-item @(version.IsCurrent ? "current" : "")">
                                <div class="version-info">
                                    <span class="version-number">v@version.Version</span>
                                    @if (version.IsCurrent)
                                    {
                                        <span class="current-badge">Current</span>
                                    }
                                </div>
                                <div class="version-meta">
                                    <div class="version-date">@version.CreatedAt.ToString("MMM dd, yyyy")</div>
                                    <div class="version-author">by @version.CreatedBy</div>
                                    @if (!string.IsNullOrEmpty(version.Note))
                                    {
                                        <div class="version-note">@version.Note</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Quick Actions -->
            <div class="quick-actions-section">
                <h4>Quick Actions</h4>
                <div class="quick-actions">
                    <a href="@Model.Document.DownloadUrl" class="quick-action">
                        <i class="icon-download"></i>
                        Download
                    </a>
                    @if (Model.Document.CanPreview)
                    {
                        <a href="@Model.Document.PreviewUrl" target="_blank" class="quick-action">
                            <i class="icon-external-link"></i>
                            Open in New Tab
                        </a>
                    }
                    @if (Model.CanEdit)
                    {
                        <a href="@Url.Action("Edit", new { documentId = Model.Document.Id })" class="quick-action">
                            <i class="icon-edit"></i>
                            Edit Details
                        </a>
                    }
                    <button type="button" class="quick-action" onclick="copyDocumentLink('@Url.Action("Details", new { documentId = Model.Document.Id }, Request.Scheme)')">
                        <i class="icon-link"></i>
                        Copy Link
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load text preview if applicable
        @if (Model.Document.ContentType == "text/plain")
        {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                loadTextPreview('@Model.Document.Id');
            });
            </text>
        }

        function shareDocument(documentId) {
            // Implement share functionality
            alert('Share functionality would be implemented here');
        }

        function copyDocumentLink(url) {
            navigator.clipboard.writeText(url).then(function() {
                // Show success message
                showNotification('Link copied to clipboard', 'success');
            }).catch(function() {
                // Fallback for older browsers
                prompt('Copy this link:', url);
            });
        }

        function loadTextPreview(documentId) {
            // This would load text content via AJAX
            // For now, just show a placeholder
            document.getElementById('textPreview').innerHTML = '<p>Text preview would be loaded here...</p>';
        }

        function showNotification(message, type) {
            // Simple notification implementation
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/document-details.css" />
}
